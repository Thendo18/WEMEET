{"version":3,"file":"react-auth-provider.cjs.production.min.js","sources":["../src/AuthContext.tsx","../src/AuthProvider.tsx","../src/usePrevious.ts"],"sourcesContent":["import React from 'react';\n\nexport type IAuthContext = {\n  authenticated: boolean;\n  setAuthenticated: (isAuthenticated: boolean) => void;\n};\n\n/* istanbul ignore next */\nconst noop = () => {};\n\nexport const AuthContext = React.createContext<IAuthContext>({\n  authenticated: false,\n  setAuthenticated: noop,\n});\n","import React from 'react';\nimport { usePrevious } from './usePrevious';\nimport { AuthContext } from './AuthContext';\n\nexport type AuthProviderProps = {\n  defaultAuthenticated?: boolean;\n  onLogin?: () => void;\n  onLogout?: () => void;\n};\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({\n  defaultAuthenticated = false,\n  onLogin,\n  onLogout,\n  children,\n}) => {\n  const [authenticated, setAuthenticated] = React.useState(\n    defaultAuthenticated\n  );\n\n  const previousAuthenticated = usePrevious(authenticated);\n\n  React.useEffect(() => {\n    if (!previousAuthenticated && authenticated) {\n      onLogin && onLogin();\n    }\n  }, [previousAuthenticated, authenticated, onLogin]);\n\n  React.useEffect(() => {\n    if (previousAuthenticated && !authenticated) {\n      onLogout && onLogout();\n    }\n  }, [previousAuthenticated, authenticated, onLogout]);\n\n  const contextValue = React.useMemo(\n    () => ({\n      authenticated,\n      setAuthenticated,\n    }),\n    [authenticated]\n  );\n\n  return (\n    <AuthContext.Provider value={contextValue}>{children}</AuthContext.Provider>\n  );\n};\n","import React from 'react';\n\nexport function usePrevious<T = any>(value: T) {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = React.useRef<T>();\n\n  // Store current value in ref\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n"],"names":["AuthContext","React","createContext","authenticated","setAuthenticated","value","ref","defaultAuthenticated","onLogin","onLogout","children","useState","previousAuthenticated","useRef","useEffect","current","contextValue","useMemo","Provider"],"mappings":"yFAUaA,EAAcC,EAAMC,cAA4B,CAC3DC,eAAe,EACfC,iBAJW,0DCE4C,gBCRpBC,EAG7BC,MDMNC,qBACAC,IAAAA,QACAC,IAAAA,SACAC,IAAAA,WAE0CT,EAAMU,wBAAzCR,OAAeC,OAIhBQ,GClB6BP,EDkBOF,ECfpCG,EAAML,EAAMY,SAGlBZ,EAAMa,UAAU,WACdR,EAAIS,QAAUV,GACb,CAACA,IAGGC,EAAIS,SDSXd,EAAMa,UAAU,YACTF,GAAyBT,GAC5BK,GAAWA,KAEZ,CAACI,EAAuBT,EAAeK,IAE1CP,EAAMa,UAAU,WACVF,IAA0BT,GAC5BM,GAAYA,KAEb,CAACG,EAAuBT,EAAeM,QAEpCO,EAAef,EAAMgB,QACzB,iBAAO,CACLd,cAAAA,EACAC,iBAAAA,IAEF,CAACD,WAIDF,gBAACD,EAAYkB,UAASb,MAAOW,GAAeN"}