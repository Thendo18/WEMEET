{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findAll = exports.existsOne = exports.findOne = exports.findOneChild = exports.find = exports.filter = void 0;\n\nvar domhandler_1 = require(\"domhandler\");\n/**\n * Search a node and its children for nodes passing a test function.\n *\n * @param test Function to test nodes on.\n * @param node Node to search. Will be included in the result set if it matches.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\n\n\nfunction filter(test, node, recurse, limit) {\n  if (recurse === void 0) {\n    recurse = true;\n  }\n\n  if (limit === void 0) {\n    limit = Infinity;\n  }\n\n  if (!Array.isArray(node)) node = [node];\n  return find(test, node, recurse, limit);\n}\n\nexports.filter = filter;\n/**\n * Search an array of node and its children for nodes passing a test function.\n *\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\n\nfunction find(test, nodes, recurse, limit) {\n  var result = [];\n\n  for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n    var elem = nodes_1[_i];\n\n    if (test(elem)) {\n      result.push(elem);\n      if (--limit <= 0) break;\n    }\n\n    if (recurse && (0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {\n      var children = find(test, elem.children, recurse, limit);\n      result.push.apply(result, children);\n      limit -= children.length;\n      if (limit <= 0) break;\n    }\n  }\n\n  return result;\n}\n\nexports.find = find;\n/**\n * Finds the first element inside of an array that matches a test function.\n *\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns The first node in the array that passes `test`.\n */\n\nfunction findOneChild(test, nodes) {\n  return nodes.find(test);\n}\n\nexports.findOneChild = findOneChild;\n/**\n * Finds one element in a tree that passes a test.\n *\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @returns The first child node that passes `test`.\n */\n\nfunction findOne(test, nodes, recurse) {\n  if (recurse === void 0) {\n    recurse = true;\n  }\n\n  var elem = null;\n\n  for (var i = 0; i < nodes.length && !elem; i++) {\n    var checked = nodes[i];\n\n    if (!(0, domhandler_1.isTag)(checked)) {\n      continue;\n    } else if (test(checked)) {\n      elem = checked;\n    } else if (recurse && checked.children.length > 0) {\n      elem = findOne(test, checked.children);\n    }\n  }\n\n  return elem;\n}\n\nexports.findOne = findOne;\n/**\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns Whether a tree of nodes contains at least one node passing a test.\n */\n\nfunction existsOne(test, nodes) {\n  return nodes.some(function (checked) {\n    return (0, domhandler_1.isTag)(checked) && (test(checked) || checked.children.length > 0 && existsOne(test, checked.children));\n  });\n}\n\nexports.existsOne = existsOne;\n/**\n * Search and array of nodes and its children for nodes passing a test function.\n *\n * Same as `find`, only with less options, leading to reduced complexity.\n *\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns All nodes passing `test`.\n */\n\nfunction findAll(test, nodes) {\n  var _a;\n\n  var result = [];\n  var stack = nodes.filter(domhandler_1.isTag);\n  var elem;\n\n  while (elem = stack.shift()) {\n    var children = (_a = elem.children) === null || _a === void 0 ? void 0 : _a.filter(domhandler_1.isTag);\n\n    if (children && children.length > 0) {\n      stack.unshift.apply(stack, children);\n    }\n\n    if (test(elem)) result.push(elem);\n  }\n\n  return result;\n}\n\nexports.findAll = findAll;","map":{"version":3,"names":["Object","defineProperty","exports","value","findAll","existsOne","findOne","findOneChild","find","filter","domhandler_1","require","test","node","recurse","limit","Infinity","Array","isArray","nodes","result","_i","nodes_1","length","elem","push","hasChildren","children","apply","i","checked","isTag","some","_a","stack","shift","unshift"],"sources":["/Users/thendo/Desktop/WEMEET/node_modules/domutils/lib/querying.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.findAll = exports.existsOne = exports.findOne = exports.findOneChild = exports.find = exports.filter = void 0;\nvar domhandler_1 = require(\"domhandler\");\n/**\n * Search a node and its children for nodes passing a test function.\n *\n * @param test Function to test nodes on.\n * @param node Node to search. Will be included in the result set if it matches.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\nfunction filter(test, node, recurse, limit) {\n    if (recurse === void 0) { recurse = true; }\n    if (limit === void 0) { limit = Infinity; }\n    if (!Array.isArray(node))\n        node = [node];\n    return find(test, node, recurse, limit);\n}\nexports.filter = filter;\n/**\n * Search an array of node and its children for nodes passing a test function.\n *\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\nfunction find(test, nodes, recurse, limit) {\n    var result = [];\n    for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n        var elem = nodes_1[_i];\n        if (test(elem)) {\n            result.push(elem);\n            if (--limit <= 0)\n                break;\n        }\n        if (recurse && (0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {\n            var children = find(test, elem.children, recurse, limit);\n            result.push.apply(result, children);\n            limit -= children.length;\n            if (limit <= 0)\n                break;\n        }\n    }\n    return result;\n}\nexports.find = find;\n/**\n * Finds the first element inside of an array that matches a test function.\n *\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns The first node in the array that passes `test`.\n */\nfunction findOneChild(test, nodes) {\n    return nodes.find(test);\n}\nexports.findOneChild = findOneChild;\n/**\n * Finds one element in a tree that passes a test.\n *\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @returns The first child node that passes `test`.\n */\nfunction findOne(test, nodes, recurse) {\n    if (recurse === void 0) { recurse = true; }\n    var elem = null;\n    for (var i = 0; i < nodes.length && !elem; i++) {\n        var checked = nodes[i];\n        if (!(0, domhandler_1.isTag)(checked)) {\n            continue;\n        }\n        else if (test(checked)) {\n            elem = checked;\n        }\n        else if (recurse && checked.children.length > 0) {\n            elem = findOne(test, checked.children);\n        }\n    }\n    return elem;\n}\nexports.findOne = findOne;\n/**\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns Whether a tree of nodes contains at least one node passing a test.\n */\nfunction existsOne(test, nodes) {\n    return nodes.some(function (checked) {\n        return (0, domhandler_1.isTag)(checked) &&\n            (test(checked) ||\n                (checked.children.length > 0 &&\n                    existsOne(test, checked.children)));\n    });\n}\nexports.existsOne = existsOne;\n/**\n * Search and array of nodes and its children for nodes passing a test function.\n *\n * Same as `find`, only with less options, leading to reduced complexity.\n *\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns All nodes passing `test`.\n */\nfunction findAll(test, nodes) {\n    var _a;\n    var result = [];\n    var stack = nodes.filter(domhandler_1.isTag);\n    var elem;\n    while ((elem = stack.shift())) {\n        var children = (_a = elem.children) === null || _a === void 0 ? void 0 : _a.filter(domhandler_1.isTag);\n        if (children && children.length > 0) {\n            stack.unshift.apply(stack, children);\n        }\n        if (test(elem))\n            result.push(elem);\n    }\n    return result;\n}\nexports.findAll = findAll;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}