{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.uniqueSort = exports.compareDocumentPosition = exports.removeSubsets = void 0;\n\nvar domhandler_1 = require(\"domhandler\");\n/**\n * Given an array of nodes, remove any member that is contained by another.\n *\n * @param nodes Nodes to filter.\n * @returns Remaining nodes that aren't subtrees of each other.\n */\n\n\nfunction removeSubsets(nodes) {\n  var idx = nodes.length;\n  /*\n   * Check if each node (or one of its ancestors) is already contained in the\n   * array.\n   */\n\n  while (--idx >= 0) {\n    var node = nodes[idx];\n    /*\n     * Remove the node if it is not unique.\n     * We are going through the array from the end, so we only\n     * have to check nodes that preceed the node under consideration in the array.\n     */\n\n    if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {\n      nodes.splice(idx, 1);\n      continue;\n    }\n\n    for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent) {\n      if (nodes.includes(ancestor)) {\n        nodes.splice(idx, 1);\n        break;\n      }\n    }\n  }\n\n  return nodes;\n}\n\nexports.removeSubsets = removeSubsets;\n/**\n * Compare the position of one node against another node in any other document.\n * The return value is a bitmask with the following values:\n *\n * Document order:\n * > There is an ordering, document order, defined on all the nodes in the\n * > document corresponding to the order in which the first character of the\n * > XML representation of each node occurs in the XML representation of the\n * > document after expansion of general entities. Thus, the document element\n * > node will be the first node. Element nodes occur before their children.\n * > Thus, document order orders element nodes in order of the occurrence of\n * > their start-tag in the XML (after expansion of entities). The attribute\n * > nodes of an element occur after the element and before its children. The\n * > relative order of attribute nodes is implementation-dependent./\n *\n * Source:\n * http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order\n *\n * @param nodeA The first node to use in the comparison\n * @param nodeB The second node to use in the comparison\n * @returns A bitmask describing the input nodes' relative position.\n *\n * See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for\n * a description of these values.\n */\n\nfunction compareDocumentPosition(nodeA, nodeB) {\n  var aParents = [];\n  var bParents = [];\n\n  if (nodeA === nodeB) {\n    return 0;\n  }\n\n  var current = (0, domhandler_1.hasChildren)(nodeA) ? nodeA : nodeA.parent;\n\n  while (current) {\n    aParents.unshift(current);\n    current = current.parent;\n  }\n\n  current = (0, domhandler_1.hasChildren)(nodeB) ? nodeB : nodeB.parent;\n\n  while (current) {\n    bParents.unshift(current);\n    current = current.parent;\n  }\n\n  var maxIdx = Math.min(aParents.length, bParents.length);\n  var idx = 0;\n\n  while (idx < maxIdx && aParents[idx] === bParents[idx]) {\n    idx++;\n  }\n\n  if (idx === 0) {\n    return 1\n    /* DISCONNECTED */\n    ;\n  }\n\n  var sharedParent = aParents[idx - 1];\n  var siblings = sharedParent.children;\n  var aSibling = aParents[idx];\n  var bSibling = bParents[idx];\n\n  if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {\n    if (sharedParent === nodeB) {\n      return 4\n      /* FOLLOWING */\n      | 16\n      /* CONTAINED_BY */\n      ;\n    }\n\n    return 4\n    /* FOLLOWING */\n    ;\n  }\n\n  if (sharedParent === nodeA) {\n    return 2\n    /* PRECEDING */\n    | 8\n    /* CONTAINS */\n    ;\n  }\n\n  return 2\n  /* PRECEDING */\n  ;\n}\n\nexports.compareDocumentPosition = compareDocumentPosition;\n/**\n * Sort an array of nodes based on their relative position in the document and\n * remove any duplicate nodes. If the array contains nodes that do not belong\n * to the same document, sort order is unspecified.\n *\n * @param nodes Array of DOM nodes.\n * @returns Collection of unique nodes, sorted in document order.\n */\n\nfunction uniqueSort(nodes) {\n  nodes = nodes.filter(function (node, i, arr) {\n    return !arr.includes(node, i + 1);\n  });\n  nodes.sort(function (a, b) {\n    var relative = compareDocumentPosition(a, b);\n\n    if (relative & 2\n    /* PRECEDING */\n    ) {\n      return -1;\n    } else if (relative & 4\n    /* FOLLOWING */\n    ) {\n      return 1;\n    }\n\n    return 0;\n  });\n  return nodes;\n}\n\nexports.uniqueSort = uniqueSort;","map":{"version":3,"names":["Object","defineProperty","exports","value","uniqueSort","compareDocumentPosition","removeSubsets","domhandler_1","require","nodes","idx","length","node","lastIndexOf","splice","ancestor","parent","includes","nodeA","nodeB","aParents","bParents","current","hasChildren","unshift","maxIdx","Math","min","sharedParent","siblings","children","aSibling","bSibling","indexOf","filter","i","arr","sort","a","b","relative"],"sources":["/Users/thendo/Desktop/WEMEET/node_modules/domutils/lib/helpers.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.uniqueSort = exports.compareDocumentPosition = exports.removeSubsets = void 0;\nvar domhandler_1 = require(\"domhandler\");\n/**\n * Given an array of nodes, remove any member that is contained by another.\n *\n * @param nodes Nodes to filter.\n * @returns Remaining nodes that aren't subtrees of each other.\n */\nfunction removeSubsets(nodes) {\n    var idx = nodes.length;\n    /*\n     * Check if each node (or one of its ancestors) is already contained in the\n     * array.\n     */\n    while (--idx >= 0) {\n        var node = nodes[idx];\n        /*\n         * Remove the node if it is not unique.\n         * We are going through the array from the end, so we only\n         * have to check nodes that preceed the node under consideration in the array.\n         */\n        if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {\n            nodes.splice(idx, 1);\n            continue;\n        }\n        for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent) {\n            if (nodes.includes(ancestor)) {\n                nodes.splice(idx, 1);\n                break;\n            }\n        }\n    }\n    return nodes;\n}\nexports.removeSubsets = removeSubsets;\n/**\n * Compare the position of one node against another node in any other document.\n * The return value is a bitmask with the following values:\n *\n * Document order:\n * > There is an ordering, document order, defined on all the nodes in the\n * > document corresponding to the order in which the first character of the\n * > XML representation of each node occurs in the XML representation of the\n * > document after expansion of general entities. Thus, the document element\n * > node will be the first node. Element nodes occur before their children.\n * > Thus, document order orders element nodes in order of the occurrence of\n * > their start-tag in the XML (after expansion of entities). The attribute\n * > nodes of an element occur after the element and before its children. The\n * > relative order of attribute nodes is implementation-dependent./\n *\n * Source:\n * http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order\n *\n * @param nodeA The first node to use in the comparison\n * @param nodeB The second node to use in the comparison\n * @returns A bitmask describing the input nodes' relative position.\n *\n * See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for\n * a description of these values.\n */\nfunction compareDocumentPosition(nodeA, nodeB) {\n    var aParents = [];\n    var bParents = [];\n    if (nodeA === nodeB) {\n        return 0;\n    }\n    var current = (0, domhandler_1.hasChildren)(nodeA) ? nodeA : nodeA.parent;\n    while (current) {\n        aParents.unshift(current);\n        current = current.parent;\n    }\n    current = (0, domhandler_1.hasChildren)(nodeB) ? nodeB : nodeB.parent;\n    while (current) {\n        bParents.unshift(current);\n        current = current.parent;\n    }\n    var maxIdx = Math.min(aParents.length, bParents.length);\n    var idx = 0;\n    while (idx < maxIdx && aParents[idx] === bParents[idx]) {\n        idx++;\n    }\n    if (idx === 0) {\n        return 1 /* DISCONNECTED */;\n    }\n    var sharedParent = aParents[idx - 1];\n    var siblings = sharedParent.children;\n    var aSibling = aParents[idx];\n    var bSibling = bParents[idx];\n    if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {\n        if (sharedParent === nodeB) {\n            return 4 /* FOLLOWING */ | 16 /* CONTAINED_BY */;\n        }\n        return 4 /* FOLLOWING */;\n    }\n    if (sharedParent === nodeA) {\n        return 2 /* PRECEDING */ | 8 /* CONTAINS */;\n    }\n    return 2 /* PRECEDING */;\n}\nexports.compareDocumentPosition = compareDocumentPosition;\n/**\n * Sort an array of nodes based on their relative position in the document and\n * remove any duplicate nodes. If the array contains nodes that do not belong\n * to the same document, sort order is unspecified.\n *\n * @param nodes Array of DOM nodes.\n * @returns Collection of unique nodes, sorted in document order.\n */\nfunction uniqueSort(nodes) {\n    nodes = nodes.filter(function (node, i, arr) { return !arr.includes(node, i + 1); });\n    nodes.sort(function (a, b) {\n        var relative = compareDocumentPosition(a, b);\n        if (relative & 2 /* PRECEDING */) {\n            return -1;\n        }\n        else if (relative & 4 /* FOLLOWING */) {\n            return 1;\n        }\n        return 0;\n    });\n    return nodes;\n}\nexports.uniqueSort = uniqueSort;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}