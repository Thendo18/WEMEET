{"ast":null,"code":"// eslint-disable-next-line import/no-unassigned-import\nrequire('./typedefs');\n/**\n * Helps to build text from words.\n */\n\n\nclass InlineTextBuilder {\n  /**\n   * Creates an instance of InlineTextBuilder.\n   *\n   * If `maxLineLength` is not provided then it is either `options.wordwrap` or unlimited.\n   *\n   * @param { Options } options           HtmlToText options.\n   * @param { number }  [ maxLineLength ] This builder will try to wrap text to fit this line length.\n   */\n  constructor(options) {\n    let maxLineLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n    /** @type { string[][] } */\n    this.lines = [];\n    /** @type { string[] }   */\n\n    this.nextLineWords = [];\n    this.maxLineLength = maxLineLength || options.wordwrap || Number.MAX_VALUE;\n    this.nextLineAvailableChars = this.maxLineLength;\n    this.wrapCharacters = options.longWordSplit.wrapCharacters || [];\n    this.forceWrapOnLimit = options.longWordSplit.forceWrapOnLimit || false;\n    this.stashedSpace = false;\n    this.wordBreakOpportunity = false;\n  }\n  /**\n   * Add a new word.\n   *\n   * @param { string } word A word to add.\n   */\n\n\n  pushWord(word) {\n    if (this.nextLineAvailableChars <= 0) {\n      this.startNewLine();\n    }\n\n    const isLineStart = this.nextLineWords.length === 0;\n    const cost = word.length + (isLineStart ? 0 : 1);\n\n    if (cost <= this.nextLineAvailableChars) {\n      // Fits into available budget\n      this.nextLineWords.push(word);\n      this.nextLineAvailableChars -= cost;\n    } else {\n      // Does not fit - try to split the word\n      // The word is moved to a new line - prefer to wrap between words.\n      const [first, ...rest] = this.splitLongWord(word);\n\n      if (!isLineStart) {\n        this.startNewLine();\n      }\n\n      this.nextLineWords.push(first);\n      this.nextLineAvailableChars -= first.length;\n\n      for (const part of rest) {\n        this.startNewLine();\n        this.nextLineWords.push(part);\n        this.nextLineAvailableChars -= part.length;\n      }\n    }\n  }\n  /**\n   * Pop a word from the currently built line.\n   * This doesn't affect completed lines.\n   *\n   * @returns { string }\n   */\n\n\n  popWord() {\n    const lastWord = this.nextLineWords.pop();\n\n    if (lastWord !== undefined) {\n      const isLineStart = this.nextLineWords.length === 0;\n      const cost = lastWord.length + (isLineStart ? 0 : 1);\n      this.nextLineAvailableChars += cost;\n    }\n\n    return lastWord;\n  }\n  /**\n   * Concat a word to the last word already in the builder.\n   * Adds a new word in case there are no words yet in the last line.\n   *\n   * @param { string } word A word to be concatenated.\n   */\n\n\n  concatWord(word) {\n    if (this.wordBreakOpportunity && word.length > this.nextLineAvailableChars) {\n      this.pushWord(word);\n      this.wordBreakOpportunity = false;\n    } else {\n      const lastWord = this.popWord();\n      this.pushWord(lastWord ? lastWord.concat(word) : word);\n    }\n  }\n  /**\n   * Add current line (and more empty lines if provided argument > 1) to the list of complete lines and start a new one.\n   *\n   * @param { number } n Number of line breaks that will be added to the resulting string.\n   */\n\n\n  startNewLine() {\n    let n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    this.lines.push(this.nextLineWords);\n\n    if (n > 1) {\n      this.lines.push(...Array.from({\n        length: n - 1\n      }, () => []));\n    }\n\n    this.nextLineWords = [];\n    this.nextLineAvailableChars = this.maxLineLength;\n  }\n  /**\n   * No words in this builder.\n   *\n   * @returns { boolean }\n   */\n\n\n  isEmpty() {\n    return this.lines.length === 0 && this.nextLineWords.length === 0;\n  }\n\n  clear() {\n    this.lines.length = 0;\n    this.nextLineWords.length = 0;\n    this.nextLineAvailableChars = this.maxLineLength;\n  }\n  /**\n   * Join all lines of words inside the InlineTextBuilder into a complete string.\n   *\n   * @returns { string }\n   */\n\n\n  toString() {\n    return [...this.lines, this.nextLineWords].map(words => words.join(' ')).join('\\n');\n  }\n  /**\n   * Split a long word up to fit within the word wrap limit.\n   * Use either a character to split looking back from the word wrap limit,\n   * or truncate to the word wrap limit.\n   *\n   * @param   { string }   word Input word.\n   * @returns { string[] }      Parts of the word.\n   */\n\n\n  splitLongWord(word) {\n    const parts = [];\n    let idx = 0;\n\n    while (word.length > this.maxLineLength) {\n      const firstLine = word.substring(0, this.maxLineLength);\n      const remainingChars = word.substring(this.maxLineLength);\n      const splitIndex = firstLine.lastIndexOf(this.wrapCharacters[idx]);\n\n      if (splitIndex > -1) {\n        // Found a character to split on\n        word = firstLine.substring(splitIndex + 1) + remainingChars;\n        parts.push(firstLine.substring(0, splitIndex + 1));\n      } else {\n        // Not found a character to split on\n        idx++;\n\n        if (idx < this.wrapCharacters.length) {\n          // There is next character to try\n          word = firstLine + remainingChars;\n        } else {\n          // No more characters to try\n          if (this.forceWrapOnLimit) {\n            parts.push(firstLine);\n            word = remainingChars;\n\n            if (word.length > this.maxLineLength) {\n              continue;\n            }\n          } else {\n            word = firstLine + remainingChars;\n          }\n\n          break;\n        }\n      }\n    }\n\n    parts.push(word); // Add remaining part to array\n\n    return parts;\n  }\n\n}\n\nmodule.exports = {\n  InlineTextBuilder: InlineTextBuilder\n};","map":{"version":3,"names":["require","InlineTextBuilder","constructor","options","maxLineLength","undefined","lines","nextLineWords","wordwrap","Number","MAX_VALUE","nextLineAvailableChars","wrapCharacters","longWordSplit","forceWrapOnLimit","stashedSpace","wordBreakOpportunity","pushWord","word","startNewLine","isLineStart","length","cost","push","first","rest","splitLongWord","part","popWord","lastWord","pop","concatWord","concat","n","Array","from","isEmpty","clear","toString","map","words","join","parts","idx","firstLine","substring","remainingChars","splitIndex","lastIndexOf","module","exports"],"sources":["/Users/thendo/Desktop/WEMEET/node_modules/html-to-text/lib/inline-text-builder.js"],"sourcesContent":["// eslint-disable-next-line import/no-unassigned-import\nrequire('./typedefs');\n\n/**\n * Helps to build text from words.\n */\nclass InlineTextBuilder {\n  /**\n   * Creates an instance of InlineTextBuilder.\n   *\n   * If `maxLineLength` is not provided then it is either `options.wordwrap` or unlimited.\n   *\n   * @param { Options } options           HtmlToText options.\n   * @param { number }  [ maxLineLength ] This builder will try to wrap text to fit this line length.\n   */\n  constructor (options, maxLineLength = undefined) {\n    /** @type { string[][] } */\n    this.lines = [];\n    /** @type { string[] }   */\n    this.nextLineWords = [];\n    this.maxLineLength = maxLineLength || options.wordwrap || Number.MAX_VALUE;\n    this.nextLineAvailableChars = this.maxLineLength;\n    this.wrapCharacters = options.longWordSplit.wrapCharacters || [];\n    this.forceWrapOnLimit = options.longWordSplit.forceWrapOnLimit || false;\n\n    this.stashedSpace = false;\n    this.wordBreakOpportunity = false;\n  }\n\n  /**\n   * Add a new word.\n   *\n   * @param { string } word A word to add.\n   */\n  pushWord (word) {\n    if (this.nextLineAvailableChars <= 0) {\n      this.startNewLine();\n    }\n    const isLineStart = this.nextLineWords.length === 0;\n    const cost = word.length + (isLineStart ? 0 : 1);\n    if (cost <= this.nextLineAvailableChars) { // Fits into available budget\n\n      this.nextLineWords.push(word);\n      this.nextLineAvailableChars -= cost;\n\n    } else { // Does not fit - try to split the word\n\n      // The word is moved to a new line - prefer to wrap between words.\n      const [first, ...rest] = this.splitLongWord(word);\n      if (!isLineStart) { this.startNewLine(); }\n      this.nextLineWords.push(first);\n      this.nextLineAvailableChars -= first.length;\n      for (const part of rest) {\n        this.startNewLine();\n        this.nextLineWords.push(part);\n        this.nextLineAvailableChars -= part.length;\n      }\n\n    }\n  }\n\n  /**\n   * Pop a word from the currently built line.\n   * This doesn't affect completed lines.\n   *\n   * @returns { string }\n   */\n  popWord () {\n    const lastWord = this.nextLineWords.pop();\n    if (lastWord !== undefined) {\n      const isLineStart = this.nextLineWords.length === 0;\n      const cost = lastWord.length + (isLineStart ? 0 : 1);\n      this.nextLineAvailableChars += cost;\n    }\n    return lastWord;\n  }\n\n  /**\n   * Concat a word to the last word already in the builder.\n   * Adds a new word in case there are no words yet in the last line.\n   *\n   * @param { string } word A word to be concatenated.\n   */\n  concatWord (word) {\n    if (this.wordBreakOpportunity && word.length > this.nextLineAvailableChars) {\n      this.pushWord(word);\n      this.wordBreakOpportunity = false;\n    } else {\n      const lastWord = this.popWord();\n      this.pushWord((lastWord) ? lastWord.concat(word) : word);\n    }\n  }\n\n  /**\n   * Add current line (and more empty lines if provided argument > 1) to the list of complete lines and start a new one.\n   *\n   * @param { number } n Number of line breaks that will be added to the resulting string.\n   */\n  startNewLine (n = 1) {\n    this.lines.push(this.nextLineWords);\n    if (n > 1) {\n      this.lines.push(...Array.from({ length: n - 1 }, () => []));\n    }\n    this.nextLineWords = [];\n    this.nextLineAvailableChars = this.maxLineLength;\n  }\n\n  /**\n   * No words in this builder.\n   *\n   * @returns { boolean }\n   */\n  isEmpty () {\n    return this.lines.length === 0\n        && this.nextLineWords.length === 0;\n  }\n\n  clear () {\n    this.lines.length = 0;\n    this.nextLineWords.length = 0;\n    this.nextLineAvailableChars = this.maxLineLength;\n  }\n\n  /**\n   * Join all lines of words inside the InlineTextBuilder into a complete string.\n   *\n   * @returns { string }\n   */\n  toString () {\n    return [...this.lines, this.nextLineWords]\n      .map(words => words.join(' '))\n      .join('\\n');\n  }\n\n  /**\n   * Split a long word up to fit within the word wrap limit.\n   * Use either a character to split looking back from the word wrap limit,\n   * or truncate to the word wrap limit.\n   *\n   * @param   { string }   word Input word.\n   * @returns { string[] }      Parts of the word.\n   */\n  splitLongWord (word) {\n    const parts = [];\n    let idx = 0;\n    while (word.length > this.maxLineLength) {\n\n      const firstLine = word.substring(0, this.maxLineLength);\n      const remainingChars = word.substring(this.maxLineLength);\n\n      const splitIndex = firstLine.lastIndexOf(this.wrapCharacters[idx]);\n\n      if (splitIndex > -1) { // Found a character to split on\n\n        word = firstLine.substring(splitIndex + 1) + remainingChars;\n        parts.push(firstLine.substring(0, splitIndex + 1));\n\n      } else { // Not found a character to split on\n\n        idx++;\n        if (idx < this.wrapCharacters.length) { // There is next character to try\n\n          word = firstLine + remainingChars;\n\n        } else { // No more characters to try\n\n          if (this.forceWrapOnLimit) {\n            parts.push(firstLine);\n            word = remainingChars;\n            if (word.length > this.maxLineLength) {\n              continue;\n            }\n          } else {\n            word = firstLine + remainingChars;\n          }\n          break;\n\n        }\n\n      }\n\n    }\n    parts.push(word); // Add remaining part to array\n    return parts;\n  }\n}\n\nmodule.exports = { InlineTextBuilder: InlineTextBuilder };\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}