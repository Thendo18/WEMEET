{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar firebase = require('@firebase/app');\n\nrequire('@firebase/installations');\n\nvar tslib = require('tslib');\n\nvar util = require('@firebase/util');\n\nvar logger = require('@firebase/logger');\n\nvar component = require('@firebase/component');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar firebase__default = /*#__PURE__*/_interopDefaultLegacy(firebase);\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\r\n *\r\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\r\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\r\n * Cache API doesn't support matching entries by time.\r\n */\n\n\nvar CachingClient =\n/** @class */\nfunction () {\n  function CachingClient(client, storage, storageCache, logger) {\n    this.client = client;\n    this.storage = storage;\n    this.storageCache = storageCache;\n    this.logger = logger;\n  }\n  /**\r\n   * Returns true if the age of the cached fetched configs is less than or equal to\r\n   * {@link Settings#minimumFetchIntervalInSeconds}.\r\n   *\r\n   * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\r\n   * native Fetch API.\r\n   *\r\n   * <p>Visible for testing.\r\n   */\n\n\n  CachingClient.prototype.isCachedDataFresh = function (cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis) {\n    // Cache can only be fresh if it's populated.\n    if (!lastSuccessfulFetchTimestampMillis) {\n      this.logger.debug('Config fetch cache check. Cache unpopulated.');\n      return false;\n    } // Calculates age of cache entry.\n\n\n    var cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\n    var isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\n    this.logger.debug('Config fetch cache check.' + (\" Cache age millis: \" + cacheAgeMillis + \".\") + (\" Cache max age millis (minimumFetchIntervalMillis setting): \" + cacheMaxAgeMillis + \".\") + (\" Is cache hit: \" + isCachedDataFresh + \".\"));\n    return isCachedDataFresh;\n  };\n\n  CachingClient.prototype.fetch = function (request) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var _a, lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse, response, storageOperations;\n\n      return tslib.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Promise.all([this.storage.getLastSuccessfulFetchTimestampMillis(), this.storage.getLastSuccessfulFetchResponse()])];\n\n          case 1:\n            _a = _b.sent(), lastSuccessfulFetchTimestampMillis = _a[0], lastSuccessfulFetchResponse = _a[1]; // Exits early on cache hit.\n\n            if (lastSuccessfulFetchResponse && this.isCachedDataFresh(request.cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis)) {\n              return [2\n              /*return*/\n              , lastSuccessfulFetchResponse];\n            } // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\n            // that allows the caller to pass an ETag.\n\n\n            request.eTag = lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;\n            return [4\n            /*yield*/\n            , this.client.fetch(request)];\n\n          case 2:\n            response = _b.sent();\n            storageOperations = [// Uses write-through cache for consistency with synchronous public API.\n            this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())];\n\n            if (response.status === 200) {\n              // Caches response only if it has changed, ie non-304 responses.\n              storageOperations.push(this.storage.setLastSuccessfulFetchResponse(response));\n            }\n\n            return [4\n            /*yield*/\n            , Promise.all(storageOperations)];\n\n          case 3:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n\n  return CachingClient;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar _a;\n\nvar ERROR_DESCRIPTION_MAP = (_a = {}, _a[\"registration-window\"\n/* REGISTRATION_WINDOW */\n] = 'Undefined window object. This SDK only supports usage in a browser environment.', _a[\"registration-project-id\"\n/* REGISTRATION_PROJECT_ID */\n] = 'Undefined project identifier. Check Firebase app initialization.', _a[\"registration-api-key\"\n/* REGISTRATION_API_KEY */\n] = 'Undefined API key. Check Firebase app initialization.', _a[\"registration-app-id\"\n/* REGISTRATION_APP_ID */\n] = 'Undefined app identifier. Check Firebase app initialization.', _a[\"storage-open\"\n/* STORAGE_OPEN */\n] = 'Error thrown when opening storage. Original error: {$originalErrorMessage}.', _a[\"storage-get\"\n/* STORAGE_GET */\n] = 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.', _a[\"storage-set\"\n/* STORAGE_SET */\n] = 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.', _a[\"storage-delete\"\n/* STORAGE_DELETE */\n] = 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.', _a[\"fetch-client-network\"\n/* FETCH_NETWORK */\n] = 'Fetch client failed to connect to a network. Check Internet connection.' + ' Original error: {$originalErrorMessage}.', _a[\"fetch-timeout\"\n/* FETCH_TIMEOUT */\n] = 'The config fetch request timed out. ' + ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.', _a[\"fetch-throttle\"\n/* FETCH_THROTTLE */\n] = 'The config fetch request timed out while in an exponential backoff state.' + ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' + ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.', _a[\"fetch-client-parse\"\n/* FETCH_PARSE */\n] = 'Fetch client could not parse response.' + ' Original error: {$originalErrorMessage}.', _a[\"fetch-status\"\n/* FETCH_STATUS */\n] = 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.', _a);\nvar ERROR_FACTORY = new util.ErrorFactory('remoteconfig'\n/* service */\n, 'Remote Config'\n/* service name */\n, ERROR_DESCRIPTION_MAP); // Note how this is like typeof/instanceof, but for ErrorCode.\n\nfunction hasErrorCode(e, errorCode) {\n  return e instanceof util.FirebaseError && e.code.indexOf(errorCode) !== -1;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Attempts to get the most accurate browser language setting.\r\n *\r\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\r\n *\r\n * <p>Defers default language specification to server logic for consistency.\r\n *\r\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\r\n */\n\n\nfunction getUserLanguage(navigatorLanguage) {\n  if (navigatorLanguage === void 0) {\n    navigatorLanguage = navigator;\n  }\n\n  return (// Most reliable, but only supported in Chrome/Firefox.\n    navigatorLanguage.languages && navigatorLanguage.languages[0] || // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language // Polyfill otherwise.\n\n  );\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Implements the Client abstraction for the Remote Config REST API.\r\n */\n\n\nvar RestClient =\n/** @class */\nfunction () {\n  function RestClient(firebaseInstallations, sdkVersion, namespace, projectId, apiKey, appId) {\n    this.firebaseInstallations = firebaseInstallations;\n    this.sdkVersion = sdkVersion;\n    this.namespace = namespace;\n    this.projectId = projectId;\n    this.apiKey = apiKey;\n    this.appId = appId;\n  }\n  /**\r\n   * Fetches from the Remote Config REST API.\r\n   *\r\n   * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\r\n   * connect to the network.\r\n   * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\r\n   * fetch response.\r\n   * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\r\n   */\n\n\n  RestClient.prototype.fetch = function (request) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var _a, installationId, installationToken, urlBase, url, headers, requestBody, options, fetchPromise, timeoutPromise, response, originalError_1, errorCode, status, responseEtag, config, state, responseBody, originalError_2;\n\n      return tslib.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Promise.all([this.firebaseInstallations.getId(), this.firebaseInstallations.getToken()])];\n\n          case 1:\n            _a = _b.sent(), installationId = _a[0], installationToken = _a[1];\n            urlBase = window.FIREBASE_REMOTE_CONFIG_URL_BASE || 'https://firebaseremoteconfig.googleapis.com';\n            url = urlBase + \"/v1/projects/\" + this.projectId + \"/namespaces/\" + this.namespace + \":fetch?key=\" + this.apiKey;\n            headers = {\n              'Content-Type': 'application/json',\n              'Content-Encoding': 'gzip',\n              // Deviates from pure decorator by not passing max-age header since we don't currently have\n              // service behavior using that header.\n              'If-None-Match': request.eTag || '*'\n            };\n            requestBody = {\n              /* eslint-disable camelcase */\n              sdk_version: this.sdkVersion,\n              app_instance_id: installationId,\n              app_instance_id_token: installationToken,\n              app_id: this.appId,\n              language_code: getUserLanguage()\n              /* eslint-enable camelcase */\n\n            };\n            options = {\n              method: 'POST',\n              headers: headers,\n              body: JSON.stringify(requestBody)\n            };\n            fetchPromise = fetch(url, options);\n            timeoutPromise = new Promise(function (_resolve, reject) {\n              // Maps async event listener to Promise API.\n              request.signal.addEventListener(function () {\n                // Emulates https://heycam.github.io/webidl/#aborterror\n                var error = new Error('The operation was aborted.');\n                error.name = 'AbortError';\n                reject(error);\n              });\n            });\n            _b.label = 2;\n\n          case 2:\n            _b.trys.push([2, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , Promise.race([fetchPromise, timeoutPromise])];\n\n          case 3:\n            _b.sent();\n\n            return [4\n            /*yield*/\n            , fetchPromise];\n\n          case 4:\n            response = _b.sent();\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            originalError_1 = _b.sent();\n            errorCode = \"fetch-client-network\"\n            /* FETCH_NETWORK */\n            ;\n\n            if (originalError_1.name === 'AbortError') {\n              errorCode = \"fetch-timeout\"\n              /* FETCH_TIMEOUT */\n              ;\n            }\n\n            throw ERROR_FACTORY.create(errorCode, {\n              originalErrorMessage: originalError_1.message\n            });\n\n          case 6:\n            status = response.status;\n            responseEtag = response.headers.get('ETag') || undefined;\n            if (!(response.status === 200)) return [3\n            /*break*/\n            , 11];\n            responseBody = void 0;\n            _b.label = 7;\n\n          case 7:\n            _b.trys.push([7, 9,, 10]);\n\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 8:\n            responseBody = _b.sent();\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            originalError_2 = _b.sent();\n            throw ERROR_FACTORY.create(\"fetch-client-parse\"\n            /* FETCH_PARSE */\n            , {\n              originalErrorMessage: originalError_2.message\n            });\n\n          case 10:\n            config = responseBody['entries'];\n            state = responseBody['state'];\n            _b.label = 11;\n\n          case 11:\n            // Normalizes based on legacy state.\n            if (state === 'INSTANCE_STATE_UNSPECIFIED') {\n              status = 500;\n            } else if (state === 'NO_CHANGE') {\n              status = 304;\n            } else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\n              // These cases can be fixed remotely, so normalize to safe value.\n              config = {};\n            } // Normalize to exception-based control flow for non-success cases.\n            // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\n            // differentiating success states (200 from 304; the state body param is undefined in a\n            // standard 304).\n\n\n            if (status !== 304 && status !== 200) {\n              throw ERROR_FACTORY.create(\"fetch-status\"\n              /* FETCH_STATUS */\n              , {\n                httpStatus: status\n              });\n            }\n\n            return [2\n            /*return*/\n            , {\n              status: status,\n              eTag: responseEtag,\n              config: config\n            }];\n        }\n      });\n    });\n  };\n\n  return RestClient;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Shims a minimal AbortSignal.\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\n\n\nvar RemoteConfigAbortSignal =\n/** @class */\nfunction () {\n  function RemoteConfigAbortSignal() {\n    this.listeners = [];\n  }\n\n  RemoteConfigAbortSignal.prototype.addEventListener = function (listener) {\n    this.listeners.push(listener);\n  };\n\n  RemoteConfigAbortSignal.prototype.abort = function () {\n    this.listeners.forEach(function (listener) {\n      return listener();\n    });\n  };\n\n  return RemoteConfigAbortSignal;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DEFAULT_VALUE_FOR_BOOLEAN = false;\nvar DEFAULT_VALUE_FOR_STRING = '';\nvar DEFAULT_VALUE_FOR_NUMBER = 0;\nvar BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\n\nvar Value =\n/** @class */\nfunction () {\n  function Value(_source, _value) {\n    if (_value === void 0) {\n      _value = DEFAULT_VALUE_FOR_STRING;\n    }\n\n    this._source = _source;\n    this._value = _value;\n  }\n\n  Value.prototype.asString = function () {\n    return this._value;\n  };\n\n  Value.prototype.asBoolean = function () {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_BOOLEAN;\n    }\n\n    return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\n  };\n\n  Value.prototype.asNumber = function () {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_NUMBER;\n    }\n\n    var num = Number(this._value);\n\n    if (isNaN(num)) {\n      num = DEFAULT_VALUE_FOR_NUMBER;\n    }\n\n    return num;\n  };\n\n  Value.prototype.getSource = function () {\n    return this._source;\n  };\n\n  return Value;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\n\nvar DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\n\n/**\r\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\r\n *\r\n * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.\r\n */\n\nvar RemoteConfig =\n/** @class */\nfunction () {\n  function RemoteConfig( // Required by FirebaseServiceFactory interface.\n  app, // JS doesn't support private yet\n  // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\n  // underscore prefix.\n  _client, _storageCache, _storage, _logger) {\n    this.app = app;\n    this._client = _client;\n    this._storageCache = _storageCache;\n    this._storage = _storage;\n    this._logger = _logger; // Tracks completion of initialization promise.\n\n    this._isInitializationComplete = false;\n    this.settings = {\n      fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\n      minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\n    };\n    this.defaultConfig = {};\n  } // Based on packages/firestore/src/util/log.ts but not static because we need per-instance levels\n  // to differentiate 2p and 3p use-cases.\n\n\n  RemoteConfig.prototype.setLogLevel = function (logLevel) {\n    switch (logLevel) {\n      case 'debug':\n        this._logger.logLevel = logger.LogLevel.DEBUG;\n        break;\n\n      case 'silent':\n        this._logger.logLevel = logger.LogLevel.SILENT;\n        break;\n\n      default:\n        this._logger.logLevel = logger.LogLevel.ERROR;\n    }\n  };\n\n  Object.defineProperty(RemoteConfig.prototype, \"fetchTimeMillis\", {\n    get: function () {\n      return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RemoteConfig.prototype, \"lastFetchStatus\", {\n    get: function () {\n      return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  RemoteConfig.prototype.activate = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var _a, lastSuccessfulFetchResponse, activeConfigEtag;\n\n      return tslib.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Promise.all([this._storage.getLastSuccessfulFetchResponse(), this._storage.getActiveConfigEtag()])];\n\n          case 1:\n            _a = _b.sent(), lastSuccessfulFetchResponse = _a[0], activeConfigEtag = _a[1];\n\n            if (!lastSuccessfulFetchResponse || !lastSuccessfulFetchResponse.config || !lastSuccessfulFetchResponse.eTag || lastSuccessfulFetchResponse.eTag === activeConfigEtag) {\n              // Either there is no successful fetched config, or is the same as current active\n              // config.\n              return [2\n              /*return*/\n              , false];\n            }\n\n            return [4\n            /*yield*/\n            , Promise.all([this._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config), this._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)])];\n\n          case 2:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , true];\n        }\n      });\n    });\n  };\n\n  RemoteConfig.prototype.ensureInitialized = function () {\n    var _this = this;\n\n    if (!this._initializePromise) {\n      this._initializePromise = this._storageCache.loadFromStorage().then(function () {\n        _this._isInitializationComplete = true;\n      });\n    }\n\n    return this._initializePromise;\n  };\n  /**\r\n   * @throws a {@link ErrorCode.FETCH_CLIENT_TIMEOUT} if the request takes longer than\r\n   * {@link Settings.fetchTimeoutInSeconds} or\r\n   * {@link DEFAULT_FETCH_TIMEOUT_SECONDS}.\r\n   */\n\n\n  RemoteConfig.prototype.fetch = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var abortSignal, e_1, lastFetchStatus;\n\n      var _this = this;\n\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            abortSignal = new RemoteConfigAbortSignal();\n            setTimeout(function () {\n              return tslib.__awaiter(_this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                  // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n                  abortSignal.abort();\n                  return [2\n                  /*return*/\n                  ];\n                });\n              });\n            }, this.settings.fetchTimeoutMillis);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 6]);\n\n            return [4\n            /*yield*/\n            , this._client.fetch({\n              cacheMaxAgeMillis: this.settings.minimumFetchIntervalMillis,\n              signal: abortSignal\n            })];\n\n          case 2:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this._storageCache.setLastFetchStatus('success')];\n\n          case 3:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 4:\n            e_1 = _a.sent();\n            lastFetchStatus = hasErrorCode(e_1, \"fetch-throttle\"\n            /* FETCH_THROTTLE */\n            ) ? 'throttle' : 'failure';\n            return [4\n            /*yield*/\n            , this._storageCache.setLastFetchStatus(lastFetchStatus)];\n\n          case 5:\n            _a.sent();\n\n            throw e_1;\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  RemoteConfig.prototype.fetchAndActivate = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.fetch()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , this.activate()];\n        }\n      });\n    });\n  };\n\n  RemoteConfig.prototype.getAll = function () {\n    var _this = this;\n\n    return getAllKeys(this._storageCache.getActiveConfig(), this.defaultConfig).reduce(function (allConfigs, key) {\n      allConfigs[key] = _this.getValue(key);\n      return allConfigs;\n    }, {});\n  };\n\n  RemoteConfig.prototype.getBoolean = function (key) {\n    return this.getValue(key).asBoolean();\n  };\n\n  RemoteConfig.prototype.getNumber = function (key) {\n    return this.getValue(key).asNumber();\n  };\n\n  RemoteConfig.prototype.getString = function (key) {\n    return this.getValue(key).asString();\n  };\n\n  RemoteConfig.prototype.getValue = function (key) {\n    if (!this._isInitializationComplete) {\n      this._logger.debug(\"A value was requested for key \\\"\" + key + \"\\\" before SDK initialization completed.\" + ' Await on ensureInitialized if the intent was to get a previously activated value.');\n    }\n\n    var activeConfig = this._storageCache.getActiveConfig();\n\n    if (activeConfig && activeConfig[key] !== undefined) {\n      return new Value('remote', activeConfig[key]);\n    } else if (this.defaultConfig && this.defaultConfig[key] !== undefined) {\n      return new Value('default', String(this.defaultConfig[key]));\n    }\n\n    this._logger.debug(\"Returning static value for key \\\"\" + key + \"\\\".\" + ' Define a default or remote value if this is unintentional.');\n\n    return new Value('static');\n  };\n\n  return RemoteConfig;\n}();\n/**\r\n * Dedupes and returns an array of all the keys of the received objects.\r\n */\n\n\nfunction getAllKeys(obj1, obj2) {\n  if (obj1 === void 0) {\n    obj1 = {};\n  }\n\n  if (obj2 === void 0) {\n    obj2 = {};\n  }\n\n  return Object.keys(tslib.__assign(tslib.__assign({}, obj1), obj2));\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\r\n */\n\n\nfunction toFirebaseError(event, errorCode) {\n  var originalError = event.target.error || undefined;\n  return ERROR_FACTORY.create(errorCode, {\n    originalErrorMessage: originalError && originalError.message\n  });\n}\n/**\r\n * A general-purpose store keyed by app + namespace + {@link\r\n * ProjectNamespaceKeyFieldValue}.\r\n *\r\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\r\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\r\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\r\n *\r\n * <p>Visible for testing.\r\n */\n\n\nvar APP_NAMESPACE_STORE = 'app_namespace_store';\nvar DB_NAME = 'firebase_remote_config';\nvar DB_VERSION = 1; // Visible for testing.\n\nfunction openDatabase() {\n  return new Promise(function (resolve, reject) {\n    var request = indexedDB.open(DB_NAME, DB_VERSION);\n\n    request.onerror = function (event) {\n      reject(toFirebaseError(event, \"storage-open\"\n      /* STORAGE_OPEN */\n      ));\n    };\n\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n\n    request.onupgradeneeded = function (event) {\n      var db = event.target.result; // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n\n      switch (event.oldVersion) {\n        case 0:\n          db.createObjectStore(APP_NAMESPACE_STORE, {\n            keyPath: 'compositeKey'\n          });\n      }\n    };\n  });\n}\n/**\r\n * Abstracts data persistence.\r\n */\n\n\nvar Storage =\n/** @class */\nfunction () {\n  /**\r\n   * @param appId enables storage segmentation by app (ID + name).\r\n   * @param appName enables storage segmentation by app (ID + name).\r\n   * @param namespace enables storage segmentation by namespace.\r\n   */\n  function Storage(appId, appName, namespace, openDbPromise) {\n    if (openDbPromise === void 0) {\n      openDbPromise = openDatabase();\n    }\n\n    this.appId = appId;\n    this.appName = appName;\n    this.namespace = namespace;\n    this.openDbPromise = openDbPromise;\n  }\n\n  Storage.prototype.getLastFetchStatus = function () {\n    return this.get('last_fetch_status');\n  };\n\n  Storage.prototype.setLastFetchStatus = function (status) {\n    return this.set('last_fetch_status', status);\n  }; // This is comparable to a cache entry timestamp. If we need to expire other data, we could\n  // consider adding timestamp to all storage records and an optional max age arg to getters.\n\n\n  Storage.prototype.getLastSuccessfulFetchTimestampMillis = function () {\n    return this.get('last_successful_fetch_timestamp_millis');\n  };\n\n  Storage.prototype.setLastSuccessfulFetchTimestampMillis = function (timestamp) {\n    return this.set('last_successful_fetch_timestamp_millis', timestamp);\n  };\n\n  Storage.prototype.getLastSuccessfulFetchResponse = function () {\n    return this.get('last_successful_fetch_response');\n  };\n\n  Storage.prototype.setLastSuccessfulFetchResponse = function (response) {\n    return this.set('last_successful_fetch_response', response);\n  };\n\n  Storage.prototype.getActiveConfig = function () {\n    return this.get('active_config');\n  };\n\n  Storage.prototype.setActiveConfig = function (config) {\n    return this.set('active_config', config);\n  };\n\n  Storage.prototype.getActiveConfigEtag = function () {\n    return this.get('active_config_etag');\n  };\n\n  Storage.prototype.setActiveConfigEtag = function (etag) {\n    return this.set('active_config_etag', etag);\n  };\n\n  Storage.prototype.getThrottleMetadata = function () {\n    return this.get('throttle_metadata');\n  };\n\n  Storage.prototype.setThrottleMetadata = function (metadata) {\n    return this.set('throttle_metadata', metadata);\n  };\n\n  Storage.prototype.deleteThrottleMetadata = function () {\n    return this.delete('throttle_metadata');\n  };\n\n  Storage.prototype.get = function (key) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var db;\n\n      var _this = this;\n\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.openDbPromise];\n\n          case 1:\n            db = _a.sent();\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              var transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\n              var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n\n              var compositeKey = _this.createCompositeKey(key);\n\n              try {\n                var request = objectStore.get(compositeKey);\n\n                request.onerror = function (event) {\n                  reject(toFirebaseError(event, \"storage-get\"\n                  /* STORAGE_GET */\n                  ));\n                };\n\n                request.onsuccess = function (event) {\n                  var result = event.target.result;\n\n                  if (result) {\n                    resolve(result.value);\n                  } else {\n                    resolve(undefined);\n                  }\n                };\n              } catch (e) {\n                reject(ERROR_FACTORY.create(\"storage-get\"\n                /* STORAGE_GET */\n                , {\n                  originalErrorMessage: e && e.message\n                }));\n              }\n            })];\n        }\n      });\n    });\n  };\n\n  Storage.prototype.set = function (key, value) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var db;\n\n      var _this = this;\n\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.openDbPromise];\n\n          case 1:\n            db = _a.sent();\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              var transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n              var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n\n              var compositeKey = _this.createCompositeKey(key);\n\n              try {\n                var request = objectStore.put({\n                  compositeKey: compositeKey,\n                  value: value\n                });\n\n                request.onerror = function (event) {\n                  reject(toFirebaseError(event, \"storage-set\"\n                  /* STORAGE_SET */\n                  ));\n                };\n\n                request.onsuccess = function () {\n                  resolve();\n                };\n              } catch (e) {\n                reject(ERROR_FACTORY.create(\"storage-set\"\n                /* STORAGE_SET */\n                , {\n                  originalErrorMessage: e && e.message\n                }));\n              }\n            })];\n        }\n      });\n    });\n  };\n\n  Storage.prototype.delete = function (key) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var db;\n\n      var _this = this;\n\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.openDbPromise];\n\n          case 1:\n            db = _a.sent();\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              var transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n              var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n\n              var compositeKey = _this.createCompositeKey(key);\n\n              try {\n                var request = objectStore.delete(compositeKey);\n\n                request.onerror = function (event) {\n                  reject(toFirebaseError(event, \"storage-delete\"\n                  /* STORAGE_DELETE */\n                  ));\n                };\n\n                request.onsuccess = function () {\n                  resolve();\n                };\n              } catch (e) {\n                reject(ERROR_FACTORY.create(\"storage-delete\"\n                /* STORAGE_DELETE */\n                , {\n                  originalErrorMessage: e && e.message\n                }));\n              }\n            })];\n        }\n      });\n    });\n  }; // Facilitates composite key functionality (which is unsupported in IE).\n\n\n  Storage.prototype.createCompositeKey = function (key) {\n    return [this.appId, this.appName, this.namespace, key].join();\n  };\n\n  return Storage;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\r\n */\n\n\nvar StorageCache =\n/** @class */\nfunction () {\n  function StorageCache(storage) {\n    this.storage = storage;\n  }\n  /**\r\n   * Memory-only getters\r\n   */\n\n\n  StorageCache.prototype.getLastFetchStatus = function () {\n    return this.lastFetchStatus;\n  };\n\n  StorageCache.prototype.getLastSuccessfulFetchTimestampMillis = function () {\n    return this.lastSuccessfulFetchTimestampMillis;\n  };\n\n  StorageCache.prototype.getActiveConfig = function () {\n    return this.activeConfig;\n  };\n  /**\r\n   * Read-ahead getter\r\n   */\n\n\n  StorageCache.prototype.loadFromStorage = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var lastFetchStatusPromise, lastSuccessfulFetchTimestampMillisPromise, activeConfigPromise, lastFetchStatus, lastSuccessfulFetchTimestampMillis, activeConfig;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            lastFetchStatusPromise = this.storage.getLastFetchStatus();\n            lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();\n            activeConfigPromise = this.storage.getActiveConfig();\n            return [4\n            /*yield*/\n            , lastFetchStatusPromise];\n\n          case 1:\n            lastFetchStatus = _a.sent();\n\n            if (lastFetchStatus) {\n              this.lastFetchStatus = lastFetchStatus;\n            }\n\n            return [4\n            /*yield*/\n            , lastSuccessfulFetchTimestampMillisPromise];\n\n          case 2:\n            lastSuccessfulFetchTimestampMillis = _a.sent();\n\n            if (lastSuccessfulFetchTimestampMillis) {\n              this.lastSuccessfulFetchTimestampMillis = lastSuccessfulFetchTimestampMillis;\n            }\n\n            return [4\n            /*yield*/\n            , activeConfigPromise];\n\n          case 3:\n            activeConfig = _a.sent();\n\n            if (activeConfig) {\n              this.activeConfig = activeConfig;\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Write-through setters\r\n   */\n\n\n  StorageCache.prototype.setLastFetchStatus = function (status) {\n    this.lastFetchStatus = status;\n    return this.storage.setLastFetchStatus(status);\n  };\n\n  StorageCache.prototype.setLastSuccessfulFetchTimestampMillis = function (timestampMillis) {\n    this.lastSuccessfulFetchTimestampMillis = timestampMillis;\n    return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\n  };\n\n  StorageCache.prototype.setActiveConfig = function (activeConfig) {\n    this.activeConfig = activeConfig;\n    return this.storage.setActiveConfig(activeConfig);\n  };\n\n  return StorageCache;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\n\n\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\n  return new Promise(function (resolve, reject) {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n    var timeout = setTimeout(resolve, backoffMillis); // Adds listener, rather than sets onabort, because signal is a shared object.\n\n    signal.addEventListener(function () {\n      clearTimeout(timeout); // If the request completes before this timeout, the rejection has no effect.\n\n      reject(ERROR_FACTORY.create(\"fetch-throttle\"\n      /* FETCH_THROTTLE */\n      , {\n        throttleEndTimeMillis: throttleEndTimeMillis\n      }));\n    });\n  });\n}\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\n\n\nfunction isRetriableError(e) {\n  if (!(e instanceof util.FirebaseError)) {\n    return false;\n  } // Uses string index defined by ErrorData, which FirebaseError implements.\n\n\n  var httpStatus = Number(e['httpStatus']);\n  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;\n}\n/**\r\n * Decorates a Client with retry logic.\r\n *\r\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\r\n * responses (because the SDK has no use for error responses).\r\n */\n\n\nvar RetryingClient =\n/** @class */\nfunction () {\n  function RetryingClient(client, storage) {\n    this.client = client;\n    this.storage = storage;\n  }\n\n  RetryingClient.prototype.fetch = function (request) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var throttleMetadata;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.storage.getThrottleMetadata()];\n\n          case 1:\n            throttleMetadata = _a.sent() || {\n              backoffCount: 0,\n              throttleEndTimeMillis: Date.now()\n            };\n            return [2\n            /*return*/\n            , this.attemptFetch(request, throttleMetadata)];\n        }\n      });\n    });\n  };\n  /**\r\n   * A recursive helper for attempting a fetch request repeatedly.\r\n   *\r\n   * @throws any non-retriable errors.\r\n   */\n\n\n  RetryingClient.prototype.attemptFetch = function (request, _a) {\n    var throttleEndTimeMillis = _a.throttleEndTimeMillis,\n        backoffCount = _a.backoffCount;\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var response, e_1, throttleMetadata;\n      return tslib.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            // Starts with a (potentially zero) timeout to support resumption from stored state.\n            // Ensures the throttle end time is honored if the last attempt timed out.\n            // Note the SDK will never make a request if the fetch timeout expires at this point.\n            return [4\n            /*yield*/\n            , setAbortableTimeout(request.signal, throttleEndTimeMillis)];\n\n          case 1:\n            // Starts with a (potentially zero) timeout to support resumption from stored state.\n            // Ensures the throttle end time is honored if the last attempt timed out.\n            // Note the SDK will never make a request if the fetch timeout expires at this point.\n            _b.sent();\n\n            _b.label = 2;\n\n          case 2:\n            _b.trys.push([2, 5,, 7]);\n\n            return [4\n            /*yield*/\n            , this.client.fetch(request)];\n\n          case 3:\n            response = _b.sent(); // Note the SDK only clears throttle state if response is success or non-retriable.\n\n            return [4\n            /*yield*/\n            , this.storage.deleteThrottleMetadata()];\n\n          case 4:\n            // Note the SDK only clears throttle state if response is success or non-retriable.\n            _b.sent();\n\n            return [2\n            /*return*/\n            , response];\n\n          case 5:\n            e_1 = _b.sent();\n\n            if (!isRetriableError(e_1)) {\n              throw e_1;\n            }\n\n            throttleMetadata = {\n              throttleEndTimeMillis: Date.now() + util.calculateBackoffMillis(backoffCount),\n              backoffCount: backoffCount + 1\n            }; // Persists state.\n\n            return [4\n            /*yield*/\n            , this.storage.setThrottleMetadata(throttleMetadata)];\n\n          case 6:\n            // Persists state.\n            _b.sent();\n\n            return [2\n            /*return*/\n            , this.attemptFetch(request, throttleMetadata)];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return RetryingClient;\n}();\n\nvar name = \"@firebase/remote-config\";\nvar version = \"0.1.28\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction registerRemoteConfig(firebaseInstance) {\n  firebaseInstance.INTERNAL.registerComponent(new component.Component('remoteConfig', remoteConfigFactory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setMultipleInstances(true));\n  firebaseInstance.registerVersion(name, version);\n\n  function remoteConfigFactory(container, namespace) {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate(); // The following call will always succeed because rc has `import '@firebase/installations'`\n\n    var installations = container.getProvider('installations').getImmediate(); // Guards against the SDK being used in non-browser environments.\n\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(\"registration-window\"\n      /* REGISTRATION_WINDOW */\n      );\n    } // Normalizes optional inputs.\n\n\n    var _a = app.options,\n        projectId = _a.projectId,\n        apiKey = _a.apiKey,\n        appId = _a.appId;\n\n    if (!projectId) {\n      throw ERROR_FACTORY.create(\"registration-project-id\"\n      /* REGISTRATION_PROJECT_ID */\n      );\n    }\n\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(\"registration-api-key\"\n      /* REGISTRATION_API_KEY */\n      );\n    }\n\n    if (!appId) {\n      throw ERROR_FACTORY.create(\"registration-app-id\"\n      /* REGISTRATION_APP_ID */\n      );\n    }\n\n    namespace = namespace || 'firebase';\n    var storage = new Storage(appId, app.name, namespace);\n    var storageCache = new StorageCache(storage);\n    var logger$1 = new logger.Logger(name); // Sets ERROR as the default log level.\n    // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\n\n    logger$1.logLevel = logger.LogLevel.ERROR;\n    var restClient = new RestClient(installations, // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\n    firebaseInstance.SDK_VERSION, namespace, projectId, apiKey, appId);\n    var retryingClient = new RetryingClient(restClient, storage);\n    var cachingClient = new CachingClient(retryingClient, storage, storageCache, logger$1);\n    var remoteConfigInstance = new RemoteConfig(app, cachingClient, storageCache, storage, logger$1); // Starts warming cache.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n    remoteConfigInstance.ensureInitialized();\n    return remoteConfigInstance;\n  }\n}\n\nregisterRemoteConfig(firebase__default['default']);\nexports.registerRemoteConfig = registerRemoteConfig;","map":{"version":3,"sources":["../src/client/caching_client.ts","../src/errors.ts","../src/language.ts","../src/client/rest_client.ts","../src/client/remote_config_fetch_client.ts","../src/value.ts","../src/remote_config.ts","../src/storage/storage.ts","../src/storage/storage_cache.ts","../src/client/retrying_client.ts","../index.ts"],"names":["ErrorFactory","FirebaseError","FirebaseLogLevel","calculateBackoffMillis","Component","packageName","logger","Logger","firebase"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;AAOA,IAAA,aAAA;AAAA;AAAA,YAAA;EACE,SAAA,aAAA,CACmB,MADnB,EAEmB,OAFnB,EAGmB,YAHnB,EAImB,MAJnB,EAIiC;IAHd,KAAA,MAAA,GAAA,MAAA;IACA,KAAA,OAAA,GAAA,OAAA;IACA,KAAA,YAAA,GAAA,YAAA;IACA,KAAA,MAAA,GAAA,MAAA;EACf;;;;;;;;;;;;EAWJ,aAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UACE,iBADF,EAEE,kCAFF,EAEwD;;IAGtD,IAAI,CAAC,kCAAL,EAAyC;MACvC,KAAK,MAAL,CAAY,KAAZ,CAAkB,8CAAlB;MACA,OAAO,KAAP;IACD,CANqD,C;;;IAStD,IAAM,cAAc,GAAG,IAAI,CAAC,GAAL,KAAa,kCAApC;IAEA,IAAM,iBAAiB,GAAG,cAAc,IAAI,iBAA5C;IAEA,KAAK,MAAL,CAAY,KAAZ,CACE,+BACE,wBAAsB,cAAtB,GAAoC,GADtC,KAEE,iEAA+D,iBAA/D,GAAgF,GAFlF,KAGE,oBAAkB,iBAAlB,GAAmC,GAHrC,CADF;IAOA,OAAO,iBAAP;EACD,CAvBD;;EAyBM,aAAA,CAAA,SAAA,CAAA,KAAA,GAAN,UAAY,OAAZ,EAAiC;;;;;;;YAK3B,OAAA,CAAA;YAAA;YAAA,EAAM,OAAO,CAAC,GAAR,CAAY,CACpB,KAAK,OAAL,CAAa,qCAAb,EADoB,EAEpB,KAAK,OAAL,CAAa,8BAAb,EAFoB,CAAZ,CAAN,CAAA;;;YAHE,EAAA,GAGF,EAAA,CAAA,IAAA,EAHE,EACJ,kCAAkC,GAAA,EAAA,CAAA,CAAA,CAD9B,EAEJ,2BAA2B,GAAA,EAAA,CAAA,CAAA,CAFvB,C;;YASN,IACE,2BAA2B,IAC3B,KAAK,iBAAL,CACE,OAAO,CAAC,iBADV,EAEE,kCAFF,CAFF,EAME;cACA,OAAA,CAAA;cAAA;cAAA,EAAO,2BAAP,CAAA;YACD,C;;;;YAID,OAAO,CAAC,IAAR,GACE,2BAA2B,IAAI,2BAA2B,CAAC,IAD7D;YAIiB,OAAA,CAAA;YAAA;YAAA,EAAM,KAAK,MAAL,CAAY,KAAZ,CAAkB,OAAlB,CAAN,CAAA;;;YAAX,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;YAIA,iBAAiB,GAAG,C;YAExB,KAAK,YAAL,CAAkB,qCAAlB,CAAwD,IAAI,CAAC,GAAL,EAAxD,CAFwB,CAApB;;YAKN,IAAI,QAAQ,CAAC,MAAT,KAAoB,GAAxB,EAA6B;;cAE3B,iBAAiB,CAAC,IAAlB,CACE,KAAK,OAAL,CAAa,8BAAb,CAA4C,QAA5C,CADF;YAGD;;YAED,OAAA,CAAA;YAAA;YAAA,EAAM,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAAN,CAAA;;;YAAA,EAAA,CAAA,IAAA;;YAEA,OAAA,CAAA;YAAA;YAAA,EAAO,QAAP,CAAA;;;;EACD,CA9CK;;EA+CR,OAAA,aAAA;AAAC,CAzFD,EAAA;ACjCA;;;;;;;;;;;;;;;;;;;;AAmCA,IAAM,qBAAqB,IAAA,EAAA,GAAA,EAAA,EACzB,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,iFAFuB,EAGzB,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,kEAJuB,EAKzB,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,uDANuB,EAOzB,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,8DARuB,EASzB,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,6EAVuB,EAWzB,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,kFAZuB,EAazB,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,gFAduB,EAezB,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,mFAhBuB,EAiBzB,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,4EACA,2CAnBuB,EAoBzB,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,yCACA,4DAtBuB,EAuBzB,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,8EACA,4DADA,GAEA,+FA1BuB,EA2BzB,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,2CACA,2CA7BuB,EA8BzB,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,yEA/BuB,EAgC1B,EAhC0B,CAA3B;AAoDO,IAAM,aAAa,GAAG,IAAIA,IAAAA,CAAAA,YAAJ,CAC3B;AAAc;AADa,EAE3B;AAAe;AAFY,EAG3B,qBAH2B,CAAtB,C,CAMP;;SACgB,Y,CAAa,C,EAAU,S,EAAoB;EACzD,OAAO,CAAC,YAAYC,IAAAA,CAAAA,aAAb,IAA8B,CAAC,CAAC,IAAF,CAAO,OAAP,CAAe,SAAf,MAA8B,CAAC,CAApE;AACF;AChGA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;SASgB,e,CACd,iB,EAAgD;EAAhD,IAAA,iBAAA,KAAA,KAAA,CAAA,EAAA;IAAA,iBAAA,GAAA,SAAA;EAAgD;;EAEhD,O;IAEG,iBAAiB,CAAC,SAAlB,IAA+B,iBAAiB,CAAC,SAAlB,CAA4B,CAA5B,CAAhC,I;;IAGA,iBAAiB,CAAC,QALpB,C;;EAAA;AAQF;ACrCA;;;;;;;;;;;;;;;;;AA8CA;;;;;AAGA,IAAA,UAAA;AAAA;AAAA,YAAA;EACE,SAAA,UAAA,CACmB,qBADnB,EAEmB,UAFnB,EAGmB,SAHnB,EAImB,SAJnB,EAKmB,MALnB,EAMmB,KANnB,EAMgC;IALb,KAAA,qBAAA,GAAA,qBAAA;IACA,KAAA,UAAA,GAAA,UAAA;IACA,KAAA,SAAA,GAAA,SAAA;IACA,KAAA,SAAA,GAAA,SAAA;IACA,KAAA,MAAA,GAAA,MAAA;IACA,KAAA,KAAA,GAAA,KAAA;EACf;;;;;;;;;;;;EAWE,UAAA,CAAA,SAAA,CAAA,KAAA,GAAN,UAAY,OAAZ,EAAiC;;;;;;;YACa,OAAA,CAAA;YAAA;YAAA,EAAM,OAAO,CAAC,GAAR,CAAY,CAC5D,KAAK,qBAAL,CAA2B,KAA3B,EAD4D,EAE5D,KAAK,qBAAL,CAA2B,QAA3B,EAF4D,CAAZ,CAAN,CAAA;;;YAAtC,EAAA,GAAsC,EAAA,CAAA,IAAA,EAAtC,EAAC,cAAc,GAAA,EAAA,CAAA,CAAA,CAAf,EAAiB,iBAAiB,GAAA,EAAA,CAAA,CAAA,CAAlC;YAKA,OAAO,GACX,MAAM,CAAC,+BAAP,IACA,6CAFI;YAIA,GAAG,GAAM,OAAO,GAAA,eAAP,GAAuB,KAAK,SAA5B,GAAqC,cAArC,GAAoD,KAAK,SAAzD,GAAkE,aAAlE,GAAgF,KAAK,MAA9F;YAEA,OAAO,GAAG;cACd,gBAAgB,kBADF;cAEd,oBAAoB,MAFN;;;cAKd,iBAAiB,OAAO,CAAC,IAAR,IAAgB;YALnB,CAAV;YAQA,WAAW,GAAqB;;cAEpC,WAAW,EAAE,KAAK,UAFkB;cAGpC,eAAe,EAAE,cAHmB;cAIpC,qBAAqB,EAAE,iBAJa;cAKpC,MAAM,EAAE,KAAK,KALuB;cAMpC,aAAa,EAAE,eAAe;;;YANM,CAAhC;YAUA,OAAO,GAAG;cACd,MAAM,EAAE,MADM;cAEd,OAAO,EAAA,OAFO;cAGd,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe,WAAf;YAHQ,CAAV;YAOA,YAAY,GAAG,KAAK,CAAC,GAAD,EAAM,OAAN,CAApB;YACA,cAAc,GAAG,IAAI,OAAJ,CAAY,UAAC,QAAD,EAAW,MAAX,EAAiB;;cAElD,OAAO,CAAC,MAAR,CAAe,gBAAf,CAAgC,YAAA;;gBAE9B,IAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,4BAAV,CAAd;gBACA,KAAK,CAAC,IAAN,GAAa,YAAb;gBACA,MAAM,CAAC,KAAD,CAAN;cACD,CALD;YAMD,CARsB,CAAjB;;;;;;YAYJ,OAAA,CAAA;YAAA;YAAA,EAAM,OAAO,CAAC,IAAR,CAAa,CAAC,YAAD,EAAe,cAAf,CAAb,CAAN,CAAA;;;YAAA,EAAA,CAAA,IAAA;;YACW,OAAA,CAAA;YAAA;YAAA,EAAM,YAAN,CAAA;;;YAAX,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;;;;;;;YAEI,SAAS,GAAA;YAAA;YAAT;;YACJ,IAAI,eAAa,CAAC,IAAd,KAAuB,YAA3B,EAAyC;cACvC,SAAS,GAAA;cAAA;cAAT;YACD;;YACD,MAAM,aAAa,CAAC,MAAd,CAAqB,SAArB,EAAgC;cACpC,oBAAoB,EAAE,eAAa,CAAC;YADA,CAAhC,CAAN;;;YAKE,MAAM,GAAG,QAAQ,CAAC,MAAlB;YAGE,YAAY,GAAG,QAAQ,CAAC,OAAT,CAAiB,GAAjB,CAAqB,MAArB,KAAgC,SAA/C;kBAOF,QAAQ,CAAC,MAAT,KAAoB,G,GAApB,OAAA,CAAA;YAAA;YAAA,EAAA,EAAA,CAAA;YACE,YAAY,GAAA,KAAA,CAAZ;;;;;;YAEa,OAAA,CAAA;YAAA;YAAA,EAAM,QAAQ,CAAC,IAAT,EAAN,CAAA;;;YAAf,YAAY,GAAG,EAAA,CAAA,IAAA,EAAf;;;;;;;YAEA,MAAM,aAAa,CAAC,MAAd,CAAoB;YAAA;YAApB,EAA4C;cAChD,oBAAoB,EAAE,eAAa,CAAC;YADY,CAA5C,CAAN;;;YAIF,MAAM,GAAG,YAAY,CAAC,SAAD,CAArB;YACA,KAAK,GAAG,YAAY,CAAC,OAAD,CAApB;;;;;YAIF,IAAI,KAAK,KAAK,4BAAd,EAA4C;cAC1C,MAAM,GAAG,GAAT;YACD,CAFD,MAEO,IAAI,KAAK,KAAK,WAAd,EAA2B;cAChC,MAAM,GAAG,GAAT;YACD,CAFM,MAEA,IAAI,KAAK,KAAK,aAAV,IAA2B,KAAK,KAAK,cAAzC,EAAyD;;cAE9D,MAAM,GAAG,EAAT;YACD,C;;;;;;YAMD,IAAI,MAAM,KAAK,GAAX,IAAkB,MAAM,KAAK,GAAjC,EAAsC;cACpC,MAAM,aAAa,CAAC,MAAd,CAAoB;cAAA;cAApB,EAA6C;gBACjD,UAAU,EAAE;cADqC,CAA7C,CAAN;YAGD;;YAED,OAAA,CAAA;YAAA;YAAA,EAAO;cAAE,MAAM,EAAA,MAAR;cAAU,IAAI,EAAE,YAAhB;cAA8B,MAAM,EAAA;YAApC,CAAP,CAAA;;;;EACD,CA1GK;;EA2GR,OAAA,UAAA;AAAC,CA9HD,EAAA;ACjDA;;;;;;;;;;;;;;;;;AA2CA;;;;;;;;;;AAQA,IAAA,uBAAA;AAAA;AAAA,YAAA;EAAA,SAAA,uBAAA,GAAA;IACE,KAAA,SAAA,GAA+B,EAA/B;EAOD;;EANC,uBAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,QAAjB,EAAqC;IACnC,KAAK,SAAL,CAAe,IAAf,CAAoB,QAApB;EACD,CAFD;;EAGA,uBAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;IACE,KAAK,SAAL,CAAe,OAAf,CAAuB,UAAA,QAAA,EAAQ;MAAI,OAAA,QAAQ,EAAR;IAAU,CAA7C;EACD,CAFD;;EAGF,OAAA,uBAAA;AAAC,CARD,EAAA;ACnDA;;;;;;;;;;;;;;;;;;AAmBA,IAAM,yBAAyB,GAAG,KAAlC;AACA,IAAM,wBAAwB,GAAG,EAAjC;AACA,IAAM,wBAAwB,GAAG,CAAjC;AAEA,IAAM,qBAAqB,GAAG,CAAC,GAAD,EAAM,MAAN,EAAc,GAAd,EAAmB,KAAnB,EAA0B,GAA1B,EAA+B,IAA/B,CAA9B;;AAEA,IAAA,KAAA;AAAA;AAAA,YAAA;EACE,SAAA,KAAA,CACmB,OADnB,EAEmB,MAFnB,EAE4D;IAAzC,IAAA,MAAA,KAAA,KAAA,CAAA,EAAA;MAAA,MAAA,GAAA,wBAAA;IAAyC;;IADzC,KAAA,OAAA,GAAA,OAAA;IACA,KAAA,MAAA,GAAA,MAAA;EACf;;EAEJ,KAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;IACE,OAAO,KAAK,MAAZ;EACD,CAFD;;EAIA,KAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;IACE,IAAI,KAAK,OAAL,KAAiB,QAArB,EAA+B;MAC7B,OAAO,yBAAP;IACD;;IACD,OAAO,qBAAqB,CAAC,OAAtB,CAA8B,KAAK,MAAL,CAAY,WAAZ,EAA9B,KAA4D,CAAnE;EACD,CALD;;EAOA,KAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;IACE,IAAI,KAAK,OAAL,KAAiB,QAArB,EAA+B;MAC7B,OAAO,wBAAP;IACD;;IACD,IAAI,GAAG,GAAG,MAAM,CAAC,KAAK,MAAN,CAAhB;;IACA,IAAI,KAAK,CAAC,GAAD,CAAT,EAAgB;MACd,GAAG,GAAG,wBAAN;IACD;;IACD,OAAO,GAAP;EACD,CATD;;EAWA,KAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;IACE,OAAO,KAAK,OAAZ;EACD,CAFD;;EAGF,OAAA,KAAA;AAAC,CA/BD,EAAA;ACzBA;;;;;;;;;;;;;;;;;;AAmCA,IAAM,4BAA4B,GAAG,KAAK,IAA1C,C,CAA+C;;AAC/C,IAAM,4BAA4B,GAAG,KAAK,EAAL,GAAU,EAAV,GAAe,IAApD,C,CAAyD;;AAEzD;;;;;;AAKA,IAAA,YAAA;AAAA;AAAA,YAAA;EAqCE,SAAA,YAAA,E;EAEW,GAFX,E;;;EAMmB,OANnB,EAOmB,aAPnB,EAQmB,QARnB,EASmB,OATnB,EASkC;IAPvB,KAAA,GAAA,GAAA,GAAA;IAIQ,KAAA,OAAA,GAAA,OAAA;IACA,KAAA,aAAA,GAAA,aAAA;IACA,KAAA,QAAA,GAAA,QAAA;IACA,KAAA,OAAA,GAAA,OAAA,CAAe,C;;IA5C1B,KAAA,yBAAA,GAA4B,KAA5B;IAKR,KAAA,QAAA,GAAqB;MACnB,kBAAkB,EAAE,4BADD;MAEnB,0BAA0B,EAAE;IAFT,CAArB;IAKA,KAAA,aAAA,GAA8D,EAA9D;EAmCI,CA/CN,C;;;;EAgBE,YAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,QAAZ,EAA0C;IACxC,QAAQ,QAAR;MACE,KAAK,OAAL;QACE,KAAK,OAAL,CAAa,QAAb,GAAwBC,MAAAA,CAAAA,QAAAA,CAAiB,KAAzC;QACA;;MACF,KAAK,QAAL;QACE,KAAK,OAAL,CAAa,QAAb,GAAwBA,MAAAA,CAAAA,QAAAA,CAAiB,MAAzC;QACA;;MACF;QACE,KAAK,OAAL,CAAa,QAAb,GAAwBA,MAAAA,CAAAA,QAAAA,CAAiB,KAAzC;IARJ;EAUD,CAXD;;EAaA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,iBAAJ,EAAmB;SAAnB,YAAA;MACE,OAAO,KAAK,aAAL,CAAmB,qCAAnB,MAA8D,CAAC,CAAtE;IACD,CAFkB;qBAAA;;EAAA,CAAnB;EAIA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,iBAAJ,EAAmB;SAAnB,YAAA;MACE,OAAO,KAAK,aAAL,CAAmB,kBAAnB,MAA2C,cAAlD;IACD,CAFkB;qBAAA;;EAAA,CAAnB;;EAgBM,YAAA,CAAA,SAAA,CAAA,QAAA,GAAN,YAAA;;;;;;;YAC0D,OAAA,CAAA;YAAA;YAAA,EAAM,OAAO,CAAC,GAAR,CAAY,CACxE,KAAK,QAAL,CAAc,8BAAd,EADwE,EAExE,KAAK,QAAL,CAAc,mBAAd,EAFwE,CAAZ,CAAN,CAAA;;;YAAlD,EAAA,GAAkD,EAAA,CAAA,IAAA,EAAlD,EAAC,2BAA2B,GAAA,EAAA,CAAA,CAAA,CAA5B,EAA8B,gBAAgB,GAAA,EAAA,CAAA,CAAA,CAA9C;;YAIN,IACE,CAAC,2BAAD,IACA,CAAC,2BAA2B,CAAC,MAD7B,IAEA,CAAC,2BAA2B,CAAC,IAF7B,IAGA,2BAA2B,CAAC,IAA5B,KAAqC,gBAJvC,EAKE;;;cAGA,OAAA,CAAA;cAAA;cAAA,EAAO,KAAP,CAAA;YACD;;YACD,OAAA,CAAA;YAAA;YAAA,EAAM,OAAO,CAAC,GAAR,CAAY,CAChB,KAAK,aAAL,CAAmB,eAAnB,CAAmC,2BAA2B,CAAC,MAA/D,CADgB,EAEhB,KAAK,QAAL,CAAc,mBAAd,CAAkC,2BAA2B,CAAC,IAA9D,CAFgB,CAAZ,CAAN,CAAA;;;YAAA,EAAA,CAAA,IAAA;;YAIA,OAAA,CAAA;YAAA;YAAA,EAAO,IAAP,CAAA;;;;EACD,CApBK;;EAsBN,YAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;;IACE,IAAI,CAAC,KAAK,kBAAV,EAA8B;MAC5B,KAAK,kBAAL,GAA0B,KAAK,aAAL,CACvB,eADuB,GAEvB,IAFuB,CAElB,YAAA;QACJ,KAAI,CAAC,yBAAL,GAAiC,IAAjC;MACD,CAJuB,CAA1B;IAKD;;IACD,OAAO,KAAK,kBAAZ;EACD,CATD;;;;;;;;EAgBM,YAAA,CAAA,SAAA,CAAA,KAAA,GAAN,YAAA;;;;;;;;;YAWQ,WAAW,GAAG,IAAI,uBAAJ,EAAd;YAEN,UAAU,CAAC,YAAA;cAAA,OAAA,KAAA,CAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;kBAET,WAAW,CAAC,KAAZ;;;;;eAFS,CAAA;YAGV,CAHS,EAGP,KAAK,QAAL,CAAc,kBAHP,CAAV;;;;;;YAOE,OAAA,CAAA;YAAA;YAAA,EAAM,KAAK,OAAL,CAAa,KAAb,CAAmB;cACvB,iBAAiB,EAAE,KAAK,QAAL,CAAc,0BADV;cAEvB,MAAM,EAAE;YAFe,CAAnB,CAAN,CAAA;;;YAAA,EAAA,CAAA,IAAA;;YAKA,OAAA,CAAA;YAAA;YAAA,EAAM,KAAK,aAAL,CAAmB,kBAAnB,CAAsC,SAAtC,CAAN,CAAA;;;YAAA,EAAA,CAAA,IAAA;;;;;;;;YAEM,eAAe,GAAG,YAAY,CAAC,GAAD,EAAE;YAAA;YAAF,CAAZ,GACpB,UADoB,GAEpB,SAFE;YAGN,OAAA,CAAA;YAAA;YAAA,EAAM,KAAK,aAAL,CAAmB,kBAAnB,CAAsC,eAAtC,CAAN,CAAA;;;YAAA,EAAA,CAAA,IAAA;;YACA,MAAM,GAAN;;;;;;;;;EAEH,CAjCK;;EAmCA,YAAA,CAAA,SAAA,CAAA,gBAAA,GAAN,YAAA;;;;;YACE,OAAA,CAAA;YAAA;YAAA,EAAM,KAAK,KAAL,EAAN,CAAA;;;YAAA,EAAA,CAAA,IAAA;;YACA,OAAA,CAAA;YAAA;YAAA,EAAO,KAAK,QAAL,EAAP,CAAA;;;;EACD,CAHK;;EAKN,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;;IACE,OAAO,UAAU,CACf,KAAK,aAAL,CAAmB,eAAnB,EADe,EAEf,KAAK,aAFU,CAAV,CAGL,MAHK,CAGE,UAAC,UAAD,EAAa,GAAb,EAAgB;MACvB,UAAU,CAAC,GAAD,CAAV,GAAkB,KAAI,CAAC,QAAL,CAAc,GAAd,CAAlB;MACA,OAAO,UAAP;IACD,CANM,EAMJ,EANI,CAAP;EAOD,CARD;;EAUA,YAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,GAAX,EAAsB;IACpB,OAAO,KAAK,QAAL,CAAc,GAAd,EAAmB,SAAnB,EAAP;EACD,CAFD;;EAIA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,GAAV,EAAqB;IACnB,OAAO,KAAK,QAAL,CAAc,GAAd,EAAmB,QAAnB,EAAP;EACD,CAFD;;EAIA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,GAAV,EAAqB;IACnB,OAAO,KAAK,QAAL,CAAc,GAAd,EAAmB,QAAnB,EAAP;EACD,CAFD;;EAIA,YAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,GAAT,EAAoB;IAClB,IAAI,CAAC,KAAK,yBAAV,EAAqC;MACnC,KAAK,OAAL,CAAa,KAAb,CACE,qCAAkC,GAAlC,GAAqC,yCAArC,GACE,oFAFJ;IAID;;IACD,IAAM,YAAY,GAAG,KAAK,aAAL,CAAmB,eAAnB,EAArB;;IACA,IAAI,YAAY,IAAI,YAAY,CAAC,GAAD,CAAZ,KAAsB,SAA1C,EAAqD;MACnD,OAAO,IAAI,KAAJ,CAAU,QAAV,EAAoB,YAAY,CAAC,GAAD,CAAhC,CAAP;IACD,CAFD,MAEO,IAAI,KAAK,aAAL,IAAsB,KAAK,aAAL,CAAmB,GAAnB,MAA4B,SAAtD,EAAiE;MACtE,OAAO,IAAI,KAAJ,CAAU,SAAV,EAAqB,MAAM,CAAC,KAAK,aAAL,CAAmB,GAAnB,CAAD,CAA3B,CAAP;IACD;;IACD,KAAK,OAAL,CAAa,KAAb,CACE,sCAAmC,GAAnC,GAAsC,KAAtC,GACE,6DAFJ;;IAIA,OAAO,IAAI,KAAJ,CAAU,QAAV,CAAP;EACD,CAlBD;;EAmBF,OAAA,YAAA;AAAC,CAxKD,EAAA;AA0KA;;;;;AAGA,SAAS,UAAT,CAAoB,IAApB,EAAmC,IAAnC,EAAgD;EAA5B,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA;IAAA,IAAA,GAAA,EAAA;EAAa;;EAAE,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA;IAAA,IAAA,GAAA,EAAA;EAAa;;EAC9C,OAAO,MAAM,CAAC,IAAP,CAAW,KAAA,CAAA,QAAA,CAAA,KAAA,CAAA,QAAA,CAAA,EAAA,EAAM,IAAN,CAAA,EAAe,IAAf,CAAX,CAAP;AACF;AC1NA;;;;;;;;;;;;;;;;;AAyBA;;;;;AAGA,SAAS,eAAT,CAAyB,KAAzB,EAAuC,SAAvC,EAA2D;EACzD,IAAM,aAAa,GAAI,KAAK,CAAC,MAAN,CAA4B,KAA5B,IAAqC,SAA5D;EACA,OAAO,aAAa,CAAC,MAAd,CAAqB,SAArB,EAAgC;IACrC,oBAAoB,EAAE,aAAa,IAAI,aAAa,CAAC;EADhB,CAAhC,CAAP;AAGD;AAED;;;;;;;;;;;;AAUO,IAAM,mBAAmB,GAAG,qBAA5B;AAEP,IAAM,OAAO,GAAG,wBAAhB;AACA,IAAM,UAAU,GAAG,CAAnB,C,CA0BA;;SACgB,Y,GAAY;EAC1B,OAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;IACjC,IAAM,OAAO,GAAG,SAAS,CAAC,IAAV,CAAe,OAAf,EAAwB,UAAxB,CAAhB;;IACA,OAAO,CAAC,OAAR,GAAkB,UAAA,KAAA,EAAK;MACrB,MAAM,CAAC,eAAe,CAAC,KAAD,EAAM;MAAA;MAAN,CAAhB,CAAN;IACD,CAFD;;IAGA,OAAO,CAAC,SAAR,GAAoB,UAAA,KAAA,EAAK;MACvB,OAAO,CAAE,KAAK,CAAC,MAAN,CAAkC,MAApC,CAAP;IACD,CAFD;;IAGA,OAAO,CAAC,eAAR,GAA0B,UAAA,KAAA,EAAK;MAC7B,IAAM,EAAE,GAAI,KAAK,CAAC,MAAN,CAAkC,MAA9C,CAD6B,C;;;;;;MAQ7B,QAAQ,KAAK,CAAC,UAAd;QACE,KAAK,CAAL;UACE,EAAE,CAAC,iBAAH,CAAqB,mBAArB,EAA0C;YACxC,OAAO,EAAE;UAD+B,CAA1C;MAFJ;IAMD,CAdD;EAeD,CAvBM,CAAP;AAwBD;AAED;;;;;AAGA,IAAA,OAAA;AAAA;AAAA,YAAA;;;;;;EAME,SAAA,OAAA,CACmB,KADnB,EAEmB,OAFnB,EAGmB,SAHnB,EAImB,aAJnB,EAIiD;IAA9B,IAAA,aAAA,KAAA,KAAA,CAAA,EAAA;MAAA,aAAA,GAAgB,YAAY,EAA5B;IAA8B;;IAH9B,KAAA,KAAA,GAAA,KAAA;IACA,KAAA,OAAA,GAAA,OAAA;IACA,KAAA,SAAA,GAAA,SAAA;IACA,KAAA,aAAA,GAAA,aAAA;EACf;;EAEJ,OAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,YAAA;IACE,OAAO,KAAK,GAAL,CAAsB,mBAAtB,CAAP;EACD,CAFD;;EAIA,OAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,MAAnB,EAAsC;IACpC,OAAO,KAAK,GAAL,CAAsB,mBAAtB,EAA2C,MAA3C,CAAP;EACD,CAFD,CAjBF,C;;;;EAuBE,OAAA,CAAA,SAAA,CAAA,qCAAA,GAAA,YAAA;IACE,OAAO,KAAK,GAAL,CAAiB,wCAAjB,CAAP;EACD,CAFD;;EAIA,OAAA,CAAA,SAAA,CAAA,qCAAA,GAAA,UAAsC,SAAtC,EAAuD;IACrD,OAAO,KAAK,GAAL,CACL,wCADK,EAEL,SAFK,CAAP;EAID,CALD;;EAOA,OAAA,CAAA,SAAA,CAAA,8BAAA,GAAA,YAAA;IACE,OAAO,KAAK,GAAL,CAAwB,gCAAxB,CAAP;EACD,CAFD;;EAIA,OAAA,CAAA,SAAA,CAAA,8BAAA,GAAA,UAA+B,QAA/B,EAAsD;IACpD,OAAO,KAAK,GAAL,CAAwB,gCAAxB,EAA0D,QAA1D,CAAP;EACD,CAFD;;EAIA,OAAA,CAAA,SAAA,CAAA,eAAA,GAAA,YAAA;IACE,OAAO,KAAK,GAAL,CAAqC,eAArC,CAAP;EACD,CAFD;;EAIA,OAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UAAgB,MAAhB,EAAkD;IAChD,OAAO,KAAK,GAAL,CAAqC,eAArC,EAAsD,MAAtD,CAAP;EACD,CAFD;;EAIA,OAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,YAAA;IACE,OAAO,KAAK,GAAL,CAAiB,oBAAjB,CAAP;EACD,CAFD;;EAIA,OAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,UAAoB,IAApB,EAAgC;IAC9B,OAAO,KAAK,GAAL,CAAiB,oBAAjB,EAAuC,IAAvC,CAAP;EACD,CAFD;;EAIA,OAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,YAAA;IACE,OAAO,KAAK,GAAL,CAA2B,mBAA3B,CAAP;EACD,CAFD;;EAIA,OAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,UAAoB,QAApB,EAA8C;IAC5C,OAAO,KAAK,GAAL,CAA2B,mBAA3B,EAAgD,QAAhD,CAAP;EACD,CAFD;;EAIA,OAAA,CAAA,SAAA,CAAA,sBAAA,GAAA,YAAA;IACE,OAAO,KAAK,MAAL,CAAY,mBAAZ,CAAP;EACD,CAFD;;EAIM,OAAA,CAAA,SAAA,CAAA,GAAA,GAAN,UAAa,GAAb,EAA+C;;;;;;;;;YAClC,OAAA,CAAA;YAAA;YAAA,EAAM,KAAK,aAAX,CAAA;;;YAAL,EAAE,GAAG,EAAA,CAAA,IAAA,EAAL;YACN,OAAA,CAAA;YAAA;YAAA,EAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;cACjC,IAAM,WAAW,GAAG,EAAE,CAAC,WAAH,CAAe,CAAC,mBAAD,CAAf,EAAsC,UAAtC,CAApB;cACA,IAAM,WAAW,GAAG,WAAW,CAAC,WAAZ,CAAwB,mBAAxB,CAApB;;cACA,IAAM,YAAY,GAAG,KAAI,CAAC,kBAAL,CAAwB,GAAxB,CAArB;;cACA,IAAI;gBACF,IAAM,OAAO,GAAG,WAAW,CAAC,GAAZ,CAAgB,YAAhB,CAAhB;;gBACA,OAAO,CAAC,OAAR,GAAkB,UAAA,KAAA,EAAK;kBACrB,MAAM,CAAC,eAAe,CAAC,KAAD,EAAM;kBAAA;kBAAN,CAAhB,CAAN;gBACD,CAFD;;gBAGA,OAAO,CAAC,SAAR,GAAoB,UAAA,KAAA,EAAK;kBACvB,IAAM,MAAM,GAAI,KAAK,CAAC,MAAN,CAA4B,MAA5C;;kBACA,IAAI,MAAJ,EAAY;oBACV,OAAO,CAAC,MAAM,CAAC,KAAR,CAAP;kBACD,CAFD,MAEO;oBACL,OAAO,CAAC,SAAD,CAAP;kBACD;gBACF,CAPD;cAQD,CAbD,CAaE,OAAO,CAAP,EAAU;gBACV,MAAM,CACJ,aAAa,CAAC,MAAd,CAAoB;gBAAA;gBAApB,EAA4C;kBAC1C,oBAAoB,EAAE,CAAC,IAAI,CAAC,CAAC;gBADa,CAA5C,CADI,CAAN;cAKD;YACF,CAxBM,CAAP,CAAA;;;;EAyBD,CA3BK;;EA6BA,OAAA,CAAA,SAAA,CAAA,GAAA,GAAN,UAAa,GAAb,EAAiD,KAAjD,EAAyD;;;;;;;;;YAC5C,OAAA,CAAA;YAAA;YAAA,EAAM,KAAK,aAAX,CAAA;;;YAAL,EAAE,GAAG,EAAA,CAAA,IAAA,EAAL;YACN,OAAA,CAAA;YAAA;YAAA,EAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;cACjC,IAAM,WAAW,GAAG,EAAE,CAAC,WAAH,CAAe,CAAC,mBAAD,CAAf,EAAsC,WAAtC,CAApB;cACA,IAAM,WAAW,GAAG,WAAW,CAAC,WAAZ,CAAwB,mBAAxB,CAApB;;cACA,IAAM,YAAY,GAAG,KAAI,CAAC,kBAAL,CAAwB,GAAxB,CAArB;;cACA,IAAI;gBACF,IAAM,OAAO,GAAG,WAAW,CAAC,GAAZ,CAAgB;kBAC9B,YAAY,EAAA,YADkB;kBAE9B,KAAK,EAAA;gBAFyB,CAAhB,CAAhB;;gBAIA,OAAO,CAAC,OAAR,GAAkB,UAAC,KAAD,EAAa;kBAC7B,MAAM,CAAC,eAAe,CAAC,KAAD,EAAM;kBAAA;kBAAN,CAAhB,CAAN;gBACD,CAFD;;gBAGA,OAAO,CAAC,SAAR,GAAoB,YAAA;kBAClB,OAAO;gBACR,CAFD;cAGD,CAXD,CAWE,OAAO,CAAP,EAAU;gBACV,MAAM,CACJ,aAAa,CAAC,MAAd,CAAoB;gBAAA;gBAApB,EAA4C;kBAC1C,oBAAoB,EAAE,CAAC,IAAI,CAAC,CAAC;gBADa,CAA5C,CADI,CAAN;cAKD;YACF,CAtBM,CAAP,CAAA;;;;EAuBD,CAzBK;;EA2BA,OAAA,CAAA,SAAA,CAAA,MAAA,GAAN,UAAa,GAAb,EAA+C;;;;;;;;;YAClC,OAAA,CAAA;YAAA;YAAA,EAAM,KAAK,aAAX,CAAA;;;YAAL,EAAE,GAAG,EAAA,CAAA,IAAA,EAAL;YACN,OAAA,CAAA;YAAA;YAAA,EAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;cACjC,IAAM,WAAW,GAAG,EAAE,CAAC,WAAH,CAAe,CAAC,mBAAD,CAAf,EAAsC,WAAtC,CAApB;cACA,IAAM,WAAW,GAAG,WAAW,CAAC,WAAZ,CAAwB,mBAAxB,CAApB;;cACA,IAAM,YAAY,GAAG,KAAI,CAAC,kBAAL,CAAwB,GAAxB,CAArB;;cACA,IAAI;gBACF,IAAM,OAAO,GAAG,WAAW,CAAC,MAAZ,CAAmB,YAAnB,CAAhB;;gBACA,OAAO,CAAC,OAAR,GAAkB,UAAC,KAAD,EAAa;kBAC7B,MAAM,CAAC,eAAe,CAAC,KAAD,EAAM;kBAAA;kBAAN,CAAhB,CAAN;gBACD,CAFD;;gBAGA,OAAO,CAAC,SAAR,GAAoB,YAAA;kBAClB,OAAO;gBACR,CAFD;cAGD,CARD,CAQE,OAAO,CAAP,EAAU;gBACV,MAAM,CACJ,aAAa,CAAC,MAAd,CAAoB;gBAAA;gBAApB,EAA+C;kBAC7C,oBAAoB,EAAE,CAAC,IAAI,CAAC,CAAC;gBADgB,CAA/C,CADI,CAAN;cAKD;YACF,CAnBM,CAAP,CAAA;;;;EAoBD,CAtBK,CA9HR,C;;;EAuJE,OAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,GAAnB,EAAqD;IACnD,OAAO,CAAC,KAAK,KAAN,EAAa,KAAK,OAAlB,EAA2B,KAAK,SAAhC,EAA2C,GAA3C,EAAgD,IAAhD,EAAP;EACD,CAFD;;EAGF,OAAA,OAAA;AAAC,CA1JD,EAAA;ACzGA;;;;;;;;;;;;;;;;;AAqBA;;;;;AAGA,IAAA,YAAA;AAAA;AAAA,YAAA;EACE,SAAA,YAAA,CAA6B,OAA7B,EAA6C;IAAhB,KAAA,OAAA,GAAA,OAAA;EAAoB;;;;;;EAYjD,YAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,YAAA;IACE,OAAO,KAAK,eAAZ;EACD,CAFD;;EAIA,YAAA,CAAA,SAAA,CAAA,qCAAA,GAAA,YAAA;IACE,OAAO,KAAK,kCAAZ;EACD,CAFD;;EAIA,YAAA,CAAA,SAAA,CAAA,eAAA,GAAA,YAAA;IACE,OAAO,KAAK,YAAZ;EACD,CAFD;;;;;;EAOM,YAAA,CAAA,SAAA,CAAA,eAAA,GAAN,YAAA;;;;;;YACQ,sBAAsB,GAAG,KAAK,OAAL,CAAa,kBAAb,EAAzB;YACA,yCAAyC,GAAG,KAAK,OAAL,CAAa,qCAAb,EAA5C;YACA,mBAAmB,GAAG,KAAK,OAAL,CAAa,eAAb,EAAtB;YAQkB,OAAA,CAAA;YAAA;YAAA,EAAM,sBAAN,CAAA;;;YAAlB,eAAe,GAAG,EAAA,CAAA,IAAA,EAAlB;;YACN,IAAI,eAAJ,EAAqB;cACnB,KAAK,eAAL,GAAuB,eAAvB;YACD;;YAE0C,OAAA,CAAA;YAAA;YAAA,EAAM,yCAAN,CAAA;;;YAArC,kCAAkC,GAAG,EAAA,CAAA,IAAA,EAArC;;YACN,IAAI,kCAAJ,EAAwC;cACtC,KAAK,kCAAL,GAA0C,kCAA1C;YACD;;YAEoB,OAAA,CAAA;YAAA;YAAA,EAAM,mBAAN,CAAA;;;YAAf,YAAY,GAAG,EAAA,CAAA,IAAA,EAAf;;YACN,IAAI,YAAJ,EAAkB;cAChB,KAAK,YAAL,GAAoB,YAApB;YACD;;;;;;;;EACF,CAzBK;;;;;;EA8BN,YAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,MAAnB,EAAsC;IACpC,KAAK,eAAL,GAAuB,MAAvB;IACA,OAAO,KAAK,OAAL,CAAa,kBAAb,CAAgC,MAAhC,CAAP;EACD,CAHD;;EAKA,YAAA,CAAA,SAAA,CAAA,qCAAA,GAAA,UACE,eADF,EACyB;IAEvB,KAAK,kCAAL,GAA0C,eAA1C;IACA,OAAO,KAAK,OAAL,CAAa,qCAAb,CAAmD,eAAnD,CAAP;EACD,CALD;;EAOA,YAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UAAgB,YAAhB,EAAwD;IACtD,KAAK,YAAL,GAAoB,YAApB;IACA,OAAO,KAAK,OAAL,CAAa,eAAb,CAA6B,YAA7B,CAAP;EACD,CAHD;;EAIF,OAAA,YAAA;AAAC,CA1ED,EAAA;ACxBA;;;;;;;;;;;;;;;;;AA2BA;;;;;;;;;;;;;;SAYgB,mB,CACd,M,EACA,qB,EAA6B;EAE7B,OAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;;IAEjC,IAAM,aAAa,GAAG,IAAI,CAAC,GAAL,CAAS,qBAAqB,GAAG,IAAI,CAAC,GAAL,EAAjC,EAA6C,CAA7C,CAAtB;IAEA,IAAM,OAAO,GAAG,UAAU,CAAC,OAAD,EAAU,aAAV,CAA1B,CAJiC,C;;IAOjC,MAAM,CAAC,gBAAP,CAAwB,YAAA;MACtB,YAAY,CAAC,OAAD,CAAZ,CADsB,C;;MAItB,MAAM,CACJ,aAAa,CAAC,MAAd,CAAoB;MAAA;MAApB,EAA+C;QAC7C,qBAAqB,EAAA;MADwB,CAA/C,CADI,CAAN;IAKD,CATD;EAUD,CAjBM,CAAP;AAkBD;AAED;;;;;AAGA,SAAS,gBAAT,CAA0B,CAA1B,EAAkC;EAChC,IAAI,EAAE,CAAC,YAAYD,IAAAA,CAAAA,aAAf,CAAJ,EAAmC;IACjC,OAAO,KAAP;EACD,CAH+B,C;;;EAMhC,IAAM,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,YAAD,CAAF,CAAzB;EAEA,OACE,UAAU,KAAK,GAAf,IACA,UAAU,KAAK,GADf,IAEA,UAAU,KAAK,GAFf,IAGA,UAAU,KAAK,GAJjB;AAMD;AAED;;;;;;;;AAMA,IAAA,cAAA;AAAA;AAAA,YAAA;EACE,SAAA,cAAA,CACmB,MADnB,EAEmB,OAFnB,EAEmC;IADhB,KAAA,MAAA,GAAA,MAAA;IACA,KAAA,OAAA,GAAA,OAAA;EACf;;EAEE,cAAA,CAAA,SAAA,CAAA,KAAA,GAAN,UAAY,OAAZ,EAAiC;;;;;;YACL,OAAA,CAAA;YAAA;YAAA,EAAM,KAAK,OAAL,CAAa,mBAAb,EAAN,CAAA;;;YAApB,gBAAgB,GAAI,EAAA,CAAA,IAAA,EAAD,IAA8C;cACrE,YAAY,EAAE,CADuD;cAErE,qBAAqB,EAAE,IAAI,CAAC,GAAL;YAF8C,CAAjE;YAKN,OAAA,CAAA;YAAA;YAAA,EAAO,KAAK,YAAL,CAAkB,OAAlB,EAA2B,gBAA3B,CAAP,CAAA;;;;EACD,CAPK;;;;;;;;EAcA,cAAA,CAAA,SAAA,CAAA,YAAA,GAAN,UACE,OADF,EAEE,EAFF,EAE2D;QAAvD,qBAAqB,GAAA,EAAA,CAAA,qB;QAAE,YAAY,GAAA,EAAA,CAAA,Y;;;;;;;;;YAKrC,OAAA,CAAA;YAAA;YAAA,EAAM,mBAAmB,CAAC,OAAO,CAAC,MAAT,EAAiB,qBAAjB,CAAzB,CAAA;;;;;;YAAA,EAAA,CAAA,IAAA;;;;;;;YAGmB,OAAA,CAAA;YAAA;YAAA,EAAM,KAAK,MAAL,CAAY,KAAZ,CAAkB,OAAlB,CAAN,CAAA;;;YAAX,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX,C;;YAGN,OAAA,CAAA;YAAA;YAAA,EAAM,KAAK,OAAL,CAAa,sBAAb,EAAN,CAAA;;;;YAAA,EAAA,CAAA,IAAA;;YAEA,OAAA,CAAA;YAAA;YAAA,EAAO,QAAP,CAAA;;;;;YAEA,IAAI,CAAC,gBAAgB,CAAC,GAAD,CAArB,EAA0B;cACxB,MAAM,GAAN;YACD;;YAGK,gBAAgB,GAAG;cACvB,qBAAqB,EACnB,IAAI,CAAC,GAAL,KAAaE,IAAAA,CAAAA,sBAAAA,CAAuB,YAAvBA,CAFQ;cAGvB,YAAY,EAAE,YAAY,GAAG;YAHN,CAAnB,C;;YAON,OAAA,CAAA;YAAA;YAAA,EAAM,KAAK,OAAL,CAAa,mBAAb,CAAiC,gBAAjC,CAAN,CAAA;;;;YAAA,EAAA,CAAA,IAAA;;YAEA,OAAA,CAAA;YAAA;YAAA,EAAO,KAAK,YAAL,CAAkB,OAAlB,EAA2B,gBAA3B,CAAP,CAAA;;;;;;;;;EAEH,CAjCK;;EAkCR,OAAA,cAAA;AAAC,CAtDD,EAAA;;;;ACxFA;;;;;;;;;;;;;;;;;SA8CgB,oB,CACd,gB,EAAoC;EAEpC,gBAAgB,CAAC,QAAjB,CAA0B,iBAA1B,CACE,IAAIC,SAAAA,CAAAA,SAAJ,CACE,cADF,EAEE,mBAFF,EAEqB;EAAA;EAFrB,EAIE,oBAJF,CAIuB,IAJvB,CADF;EAQA,gBAAgB,CAAC,eAAjB,CAAiCC,IAAjC,EAA8C,OAA9C;;EAEA,SAAS,mBAAT,CACE,SADF,EAEE,SAFF,EAEoB;;;IAIlB,IAAM,GAAG,GAAG,SAAS,CAAC,WAAV,CAAsB,KAAtB,EAA6B,YAA7B,EAAZ,CAJkB,C;;IAMlB,IAAM,aAAa,GAAG,SAAS,CAAC,WAAV,CAAsB,eAAtB,EAAuC,YAAvC,EAAtB,CANkB,C;;IASlB,IAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;MACjC,MAAM,aAAa,CAAC,MAAd,CAAoB;MAAA;MAApB,CAAN;IACD,CAXiB,C;;;IAcZ,IAAA,EAAA,GAA+B,GAAG,CAAC,OAAnC;IAAA,IAAE,SAAS,GAAA,EAAA,CAAA,SAAX;IAAA,IAAa,MAAM,GAAA,EAAA,CAAA,MAAnB;IAAA,IAAqB,KAAK,GAAA,EAAA,CAAA,KAA1B;;IACN,IAAI,CAAC,SAAL,EAAgB;MACd,MAAM,aAAa,CAAC,MAAd,CAAoB;MAAA;MAApB,CAAN;IACD;;IACD,IAAI,CAAC,MAAL,EAAa;MACX,MAAM,aAAa,CAAC,MAAd,CAAoB;MAAA;MAApB,CAAN;IACD;;IACD,IAAI,CAAC,KAAL,EAAY;MACV,MAAM,aAAa,CAAC,MAAd,CAAoB;MAAA;MAApB,CAAN;IACD;;IACD,SAAS,GAAG,SAAS,IAAI,UAAzB;IAEA,IAAM,OAAO,GAAG,IAAI,OAAJ,CAAY,KAAZ,EAAmB,GAAG,CAAC,IAAvB,EAA6B,SAA7B,CAAhB;IACA,IAAM,YAAY,GAAG,IAAI,YAAJ,CAAiB,OAAjB,CAArB;IAEA,IAAMC,QAAM,GAAG,IAAIC,MAAAA,CAAAA,MAAJ,CAAWF,IAAX,CAAf,CA7BkB,C;;;IAiClBC,QAAM,CAAC,QAAPA,GAAkBJ,MAAAA,CAAAA,QAAAA,CAAiB,KAAnCI;IAEA,IAAM,UAAU,GAAG,IAAI,UAAJ,CACjB,aADiB,E;IAGjB,gBAAgB,CAAC,WAHA,EAIjB,SAJiB,EAKjB,SALiB,EAMjB,MANiB,EAOjB,KAPiB,CAAnB;IASA,IAAM,cAAc,GAAG,IAAI,cAAJ,CAAmB,UAAnB,EAA+B,OAA/B,CAAvB;IACA,IAAM,aAAa,GAAG,IAAI,aAAJ,CACpB,cADoB,EAEpB,OAFoB,EAGpB,YAHoB,EAIpBA,QAJoB,CAAtB;IAOA,IAAM,oBAAoB,GAAG,IAAI,YAAJ,CAC3B,GAD2B,EAE3B,aAF2B,EAG3B,YAH2B,EAI3B,OAJ2B,EAK3BA,QAL2B,CAA7B,CApDkB,C;;;IA8DlB,oBAAoB,CAAC,iBAArB;IAEA,OAAO,oBAAP;EACD;AACF;;AAED,oBAAoB,CAACE,iBAAAA,CAAAA,SAAAA,CAAD,CAApB","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StorageCache } from '../storage/storage_cache';\nimport {\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { Storage } from '../storage/storage';\nimport { Logger } from '@firebase/logger';\n\n/**\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\n *\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\n * Cache API doesn't support matching entries by time.\n */\nexport class CachingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage,\n    private readonly storageCache: StorageCache,\n    private readonly logger: Logger\n  ) {}\n\n  /**\n   * Returns true if the age of the cached fetched configs is less than or equal to\n   * {@link Settings#minimumFetchIntervalInSeconds}.\n   *\n   * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\n   * native Fetch API.\n   *\n   * <p>Visible for testing.\n   */\n  isCachedDataFresh(\n    cacheMaxAgeMillis: number,\n    lastSuccessfulFetchTimestampMillis: number | undefined\n  ): boolean {\n    // Cache can only be fresh if it's populated.\n    if (!lastSuccessfulFetchTimestampMillis) {\n      this.logger.debug('Config fetch cache check. Cache unpopulated.');\n      return false;\n    }\n\n    // Calculates age of cache entry.\n    const cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\n\n    const isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\n\n    this.logger.debug(\n      'Config fetch cache check.' +\n        ` Cache age millis: ${cacheAgeMillis}.` +\n        ` Cache max age millis (minimumFetchIntervalMillis setting): ${cacheMaxAgeMillis}.` +\n        ` Is cache hit: ${isCachedDataFresh}.`\n    );\n\n    return isCachedDataFresh;\n  }\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    // Reads from persisted storage to avoid cache miss if callers don't wait on initialization.\n    const [\n      lastSuccessfulFetchTimestampMillis,\n      lastSuccessfulFetchResponse\n    ] = await Promise.all([\n      this.storage.getLastSuccessfulFetchTimestampMillis(),\n      this.storage.getLastSuccessfulFetchResponse()\n    ]);\n\n    // Exits early on cache hit.\n    if (\n      lastSuccessfulFetchResponse &&\n      this.isCachedDataFresh(\n        request.cacheMaxAgeMillis,\n        lastSuccessfulFetchTimestampMillis\n      )\n    ) {\n      return lastSuccessfulFetchResponse;\n    }\n\n    // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\n    // that allows the caller to pass an ETag.\n    request.eTag =\n      lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;\n\n    // Falls back to service on cache miss.\n    const response = await this.client.fetch(request);\n\n    // Fetch throws for non-success responses, so success is guaranteed here.\n\n    const storageOperations = [\n      // Uses write-through cache for consistency with synchronous public API.\n      this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())\n    ];\n\n    if (response.status === 200) {\n      // Caches response only if it has changed, ie non-304 responses.\n      storageOperations.push(\n        this.storage.setLastSuccessfulFetchResponse(response)\n      );\n    }\n\n    await Promise.all(storageOperations);\n\n    return response;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\n\nexport const enum ErrorCode {\n  REGISTRATION_WINDOW = 'registration-window',\n  REGISTRATION_PROJECT_ID = 'registration-project-id',\n  REGISTRATION_API_KEY = 'registration-api-key',\n  REGISTRATION_APP_ID = 'registration-app-id',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_SET = 'storage-set',\n  STORAGE_DELETE = 'storage-delete',\n  FETCH_NETWORK = 'fetch-client-network',\n  FETCH_TIMEOUT = 'fetch-timeout',\n  FETCH_THROTTLE = 'fetch-throttle',\n  FETCH_PARSE = 'fetch-client-parse',\n  FETCH_STATUS = 'fetch-status'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.REGISTRATION_WINDOW]:\n    'Undefined window object. This SDK only supports usage in a browser environment.',\n  [ErrorCode.REGISTRATION_PROJECT_ID]:\n    'Undefined project identifier. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_API_KEY]:\n    'Undefined API key. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_APP_ID]:\n    'Undefined app identifier. Check Firebase app initialization.',\n  [ErrorCode.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_SET]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_DELETE]:\n    'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_NETWORK]:\n    'Fetch client failed to connect to a network. Check Internet connection.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_TIMEOUT]:\n    'The config fetch request timed out. ' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.',\n  [ErrorCode.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [ErrorCode.FETCH_PARSE]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_STATUS]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.'\n};\n\n// Note this is effectively a type system binding a code to params. This approach overlaps with the\n// role of TS interfaces, but works well for a few reasons:\n// 1) JS is unaware of TS interfaces, eg we can't test for interface implementation in JS\n// 2) callers should have access to a human-readable summary of the error and this interpolates\n//    params into an error message;\n// 3) callers should be able to programmatically access data associated with an error, which\n//    ErrorData provides.\ninterface ErrorParams {\n  [ErrorCode.STORAGE_OPEN]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_GET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_SET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_DELETE]: { originalErrorMessage: string | undefined };\n  [ErrorCode.FETCH_NETWORK]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [ErrorCode.FETCH_PARSE]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_STATUS]: { httpStatus: number };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'remoteconfig' /* service */,\n  'Remote Config' /* service name */,\n  ERROR_DESCRIPTION_MAP\n);\n\n// Note how this is like typeof/instanceof, but for ErrorCode.\nexport function hasErrorCode(e: Error, errorCode: ErrorCode): boolean {\n  return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Attempts to get the most accurate browser language setting.\n *\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\n *\n * <p>Defers default language specification to server logic for consistency.\n *\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\n */\nexport function getUserLanguage(\n  navigatorLanguage: NavigatorLanguage = navigator\n): string {\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language\n    // Polyfill otherwise.\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport {\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FirebaseRemoteConfigObject,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { getUserLanguage } from '../language';\n\n/**\n * Defines request body parameters required to call the fetch API:\n * https://firebase.google.com/docs/reference/remote-config/rest\n *\n * <p>Not exported because this file encapsulates REST API specifics.\n *\n * <p>Not passing User Properties because Analytics' source of truth on Web is server-side.\n */\ninterface FetchRequestBody {\n  // Disables camelcase linting for request body params.\n  /* eslint-disable camelcase*/\n  sdk_version: string;\n  app_instance_id: string;\n  app_instance_id_token: string;\n  app_id: string;\n  language_code: string;\n  /* eslint-enable camelcase */\n}\n\n/**\n * Implements the Client abstraction for the Remote Config REST API.\n */\nexport class RestClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly firebaseInstallations: FirebaseInstallations,\n    private readonly sdkVersion: string,\n    private readonly namespace: string,\n    private readonly projectId: string,\n    private readonly apiKey: string,\n    private readonly appId: string\n  ) {}\n\n  /**\n   * Fetches from the Remote Config REST API.\n   *\n   * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\n   * connect to the network.\n   * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\n   * fetch response.\n   * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\n   */\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const [installationId, installationToken] = await Promise.all([\n      this.firebaseInstallations.getId(),\n      this.firebaseInstallations.getToken()\n    ]);\n\n    const urlBase =\n      window.FIREBASE_REMOTE_CONFIG_URL_BASE ||\n      'https://firebaseremoteconfig.googleapis.com';\n\n    const url = `${urlBase}/v1/projects/${this.projectId}/namespaces/${this.namespace}:fetch?key=${this.apiKey}`;\n\n    const headers = {\n      'Content-Type': 'application/json',\n      'Content-Encoding': 'gzip',\n      // Deviates from pure decorator by not passing max-age header since we don't currently have\n      // service behavior using that header.\n      'If-None-Match': request.eTag || '*'\n    };\n\n    const requestBody: FetchRequestBody = {\n      /* eslint-disable camelcase */\n      sdk_version: this.sdkVersion,\n      app_instance_id: installationId,\n      app_instance_id_token: installationToken,\n      app_id: this.appId,\n      language_code: getUserLanguage()\n      /* eslint-enable camelcase */\n    };\n\n    const options = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(requestBody)\n    };\n\n    // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.\n    const fetchPromise = fetch(url, options);\n    const timeoutPromise = new Promise((_resolve, reject) => {\n      // Maps async event listener to Promise API.\n      request.signal.addEventListener(() => {\n        // Emulates https://heycam.github.io/webidl/#aborterror\n        const error = new Error('The operation was aborted.');\n        error.name = 'AbortError';\n        reject(error);\n      });\n    });\n\n    let response;\n    try {\n      await Promise.race([fetchPromise, timeoutPromise]);\n      response = await fetchPromise;\n    } catch (originalError) {\n      let errorCode = ErrorCode.FETCH_NETWORK;\n      if (originalError.name === 'AbortError') {\n        errorCode = ErrorCode.FETCH_TIMEOUT;\n      }\n      throw ERROR_FACTORY.create(errorCode, {\n        originalErrorMessage: originalError.message\n      });\n    }\n\n    let status = response.status;\n\n    // Normalizes nullable header to optional.\n    const responseEtag = response.headers.get('ETag') || undefined;\n\n    let config: FirebaseRemoteConfigObject | undefined;\n    let state: string | undefined;\n\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    // Requesting application/json and checking for a 200 ensures there's JSON data.\n    if (response.status === 200) {\n      let responseBody;\n      try {\n        responseBody = await response.json();\n      } catch (originalError) {\n        throw ERROR_FACTORY.create(ErrorCode.FETCH_PARSE, {\n          originalErrorMessage: originalError.message\n        });\n      }\n      config = responseBody['entries'];\n      state = responseBody['state'];\n    }\n\n    // Normalizes based on legacy state.\n    if (state === 'INSTANCE_STATE_UNSPECIFIED') {\n      status = 500;\n    } else if (state === 'NO_CHANGE') {\n      status = 304;\n    } else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\n      // These cases can be fixed remotely, so normalize to safe value.\n      config = {};\n    }\n\n    // Normalize to exception-based control flow for non-success cases.\n    // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\n    // differentiating success states (200 from 304; the state body param is undefined in a\n    // standard 304).\n    if (status !== 304 && status !== 200) {\n      throw ERROR_FACTORY.create(ErrorCode.FETCH_STATUS, {\n        httpStatus: status\n      });\n    }\n\n    return { status, eTag: responseEtag, config };\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Defines a client, as in https://en.wikipedia.org/wiki/Client%E2%80%93server_model, for the\n * Remote Config server (https://firebase.google.com/docs/reference/remote-config/rest).\n *\n * <p>Abstracts throttle, response cache and network implementation details.\n *\n * <p>Modeled after the native {@link GlobalFetch} interface, which is relatively modern and\n * convenient, but simplified for Remote Config's use case.\n *\n * Disambiguation: {@link GlobalFetch} interface and the Remote Config service define \"fetch\"\n * methods. The RestClient uses the former to make HTTP calls. This interface abstracts the latter.\n */\nexport interface RemoteConfigFetchClient {\n  /**\n   * @throws if response status is not 200 or 304.\n   */\n  fetch(request: FetchRequest): Promise<FetchResponse>;\n}\n\n/**\n * Defines a self-descriptive reference for config key-value pairs.\n */\nexport interface FirebaseRemoteConfigObject {\n  [key: string]: string;\n}\n\n/**\n * Shims a minimal AbortSignal.\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class RemoteConfigAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n\n/**\n * Defines per-request inputs for the Remote Config fetch request.\n *\n * <p>Modeled after the native {@link Request} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchRequest {\n  /**\n   * Uses cached config if it is younger than this age.\n   *\n   * <p>Required because it's defined by settings, which always have a value.\n   *\n   * <p>Comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the native\n   * Fetch API.\n   */\n  cacheMaxAgeMillis: number;\n\n  /**\n   * An event bus for the signal to abort a request.\n   *\n   * <p>Required because all requests should be abortable.\n   *\n   * <p>Comparable to the native\n   * Fetch API's \"signal\" field on its request configuration object\n   * https://fetch.spec.whatwg.org/#dom-requestinit-signal.\n   *\n   * <p>Disambiguation: Remote Config commonly refers to API inputs as\n   * \"signals\". See the private ConfigFetchRequestBody interface for those:\n   * http://google3/firebase/remote_config/web/src/core/rest_client.ts?l=14&rcl=255515243.\n   */\n  signal: RemoteConfigAbortSignal;\n\n  /**\n   * The ETag header value from the last response.\n   *\n   * <p>Optional in case this is the first request.\n   *\n   * <p>Comparable to passing `headers = { 'If-None-Match': <eTag> }` to the native Fetch API.\n   */\n  eTag?: string;\n}\n\n/**\n * Defines a successful response (200 or 304).\n *\n * <p>Modeled after the native {@link Response} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchResponse {\n  /**\n   * The HTTP status, which is useful for differentiating success responses with data from\n   * those without.\n   *\n   * <p>{@link RemoteConfigClient} is modeled after the native {@link GlobalFetch} interface, so\n   * HTTP status is first-class.\n   *\n   * <p>Disambiguation: the fetch response returns a legacy \"state\" value that is redundant with the\n   * HTTP status code. The former is normalized into the latter.\n   */\n  status: number;\n\n  /**\n   * Defines the ETag response header value.\n   *\n   * <p>Only defined for 200 and 304 responses.\n   */\n  eTag?: string;\n\n  /**\n   * Defines the map of parameters returned as \"entries\" in the fetch response body.\n   *\n   * <p>Only defined for 200 responses.\n   */\n  config?: FirebaseRemoteConfigObject;\n\n  // Note: we're not extracting experiment metadata until\n  // ABT and Analytics have Web SDKs.\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Value as ValueType, ValueSource } from '@firebase/remote-config-types';\n\nconst DEFAULT_VALUE_FOR_BOOLEAN = false;\nconst DEFAULT_VALUE_FOR_STRING = '';\nconst DEFAULT_VALUE_FOR_NUMBER = 0;\n\nconst BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\n\nexport class Value implements ValueType {\n  constructor(\n    private readonly _source: ValueSource,\n    private readonly _value: string = DEFAULT_VALUE_FOR_STRING\n  ) {}\n\n  asString(): string {\n    return this._value;\n  }\n\n  asBoolean(): boolean {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_BOOLEAN;\n    }\n    return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\n  }\n\n  asNumber(): number {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_NUMBER;\n    }\n    let num = Number(this._value);\n    if (isNaN(num)) {\n      num = DEFAULT_VALUE_FOR_NUMBER;\n    }\n    return num;\n  }\n\n  getSource(): ValueSource {\n    return this._source;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  RemoteConfig as RemoteConfigType,\n  FetchStatus,\n  Settings,\n  Value as ValueType,\n  LogLevel as RemoteConfigLogLevel\n} from '@firebase/remote-config-types';\nimport { StorageCache } from './storage/storage_cache';\nimport {\n  RemoteConfigFetchClient,\n  RemoteConfigAbortSignal\n} from './client/remote_config_fetch_client';\nimport { Value } from './value';\nimport { ErrorCode, hasErrorCode } from './errors';\nimport { Storage } from './storage/storage';\nimport { Logger, LogLevel as FirebaseLogLevel } from '@firebase/logger';\n\nconst DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\nconst DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\n\n/**\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\n *\n * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.\n */\nexport class RemoteConfig implements RemoteConfigType {\n  // Tracks completion of initialization promise.\n  private _isInitializationComplete = false;\n\n  // De-duplicates initialization calls.\n  private _initializePromise?: Promise<void>;\n\n  settings: Settings = {\n    fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\n    minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\n  };\n\n  defaultConfig: { [key: string]: string | number | boolean } = {};\n\n  // Based on packages/firestore/src/util/log.ts but not static because we need per-instance levels\n  // to differentiate 2p and 3p use-cases.\n  setLogLevel(logLevel: RemoteConfigLogLevel): void {\n    switch (logLevel) {\n      case 'debug':\n        this._logger.logLevel = FirebaseLogLevel.DEBUG;\n        break;\n      case 'silent':\n        this._logger.logLevel = FirebaseLogLevel.SILENT;\n        break;\n      default:\n        this._logger.logLevel = FirebaseLogLevel.ERROR;\n    }\n  }\n\n  get fetchTimeMillis(): number {\n    return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\n  }\n\n  get lastFetchStatus(): FetchStatus {\n    return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\n  }\n\n  constructor(\n    // Required by FirebaseServiceFactory interface.\n    readonly app: FirebaseApp,\n    // JS doesn't support private yet\n    // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\n    // underscore prefix.\n    private readonly _client: RemoteConfigFetchClient,\n    private readonly _storageCache: StorageCache,\n    private readonly _storage: Storage,\n    private readonly _logger: Logger\n  ) {}\n\n  async activate(): Promise<boolean> {\n    const [lastSuccessfulFetchResponse, activeConfigEtag] = await Promise.all([\n      this._storage.getLastSuccessfulFetchResponse(),\n      this._storage.getActiveConfigEtag()\n    ]);\n    if (\n      !lastSuccessfulFetchResponse ||\n      !lastSuccessfulFetchResponse.config ||\n      !lastSuccessfulFetchResponse.eTag ||\n      lastSuccessfulFetchResponse.eTag === activeConfigEtag\n    ) {\n      // Either there is no successful fetched config, or is the same as current active\n      // config.\n      return false;\n    }\n    await Promise.all([\n      this._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),\n      this._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)\n    ]);\n    return true;\n  }\n\n  ensureInitialized(): Promise<void> {\n    if (!this._initializePromise) {\n      this._initializePromise = this._storageCache\n        .loadFromStorage()\n        .then(() => {\n          this._isInitializationComplete = true;\n        });\n    }\n    return this._initializePromise;\n  }\n\n  /**\n   * @throws a {@link ErrorCode.FETCH_CLIENT_TIMEOUT} if the request takes longer than\n   * {@link Settings.fetchTimeoutInSeconds} or\n   * {@link DEFAULT_FETCH_TIMEOUT_SECONDS}.\n   */\n  async fetch(): Promise<void> {\n    // Aborts the request after the given timeout, causing the fetch call to\n    // reject with an AbortError.\n    //\n    // <p>Aborting after the request completes is a no-op, so we don't need a\n    // corresponding clearTimeout.\n    //\n    // Locating abort logic here because:\n    // * it uses a developer setting (timeout)\n    // * it applies to all retries (like curl's max-time arg)\n    // * it is consistent with the Fetch API's signal input\n    const abortSignal = new RemoteConfigAbortSignal();\n\n    setTimeout(async () => {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      abortSignal.abort();\n    }, this.settings.fetchTimeoutMillis);\n\n    // Catches *all* errors thrown by client so status can be set consistently.\n    try {\n      await this._client.fetch({\n        cacheMaxAgeMillis: this.settings.minimumFetchIntervalMillis,\n        signal: abortSignal\n      });\n\n      await this._storageCache.setLastFetchStatus('success');\n    } catch (e) {\n      const lastFetchStatus = hasErrorCode(e, ErrorCode.FETCH_THROTTLE)\n        ? 'throttle'\n        : 'failure';\n      await this._storageCache.setLastFetchStatus(lastFetchStatus);\n      throw e;\n    }\n  }\n\n  async fetchAndActivate(): Promise<boolean> {\n    await this.fetch();\n    return this.activate();\n  }\n\n  getAll(): { [key: string]: ValueType } {\n    return getAllKeys(\n      this._storageCache.getActiveConfig(),\n      this.defaultConfig\n    ).reduce((allConfigs, key) => {\n      allConfigs[key] = this.getValue(key);\n      return allConfigs;\n    }, {} as { [key: string]: ValueType });\n  }\n\n  getBoolean(key: string): boolean {\n    return this.getValue(key).asBoolean();\n  }\n\n  getNumber(key: string): number {\n    return this.getValue(key).asNumber();\n  }\n\n  getString(key: string): string {\n    return this.getValue(key).asString();\n  }\n\n  getValue(key: string): ValueType {\n    if (!this._isInitializationComplete) {\n      this._logger.debug(\n        `A value was requested for key \"${key}\" before SDK initialization completed.` +\n          ' Await on ensureInitialized if the intent was to get a previously activated value.'\n      );\n    }\n    const activeConfig = this._storageCache.getActiveConfig();\n    if (activeConfig && activeConfig[key] !== undefined) {\n      return new Value('remote', activeConfig[key]);\n    } else if (this.defaultConfig && this.defaultConfig[key] !== undefined) {\n      return new Value('default', String(this.defaultConfig[key]));\n    }\n    this._logger.debug(\n      `Returning static value for key \"${key}\".` +\n        ' Define a default or remote value if this is unintentional.'\n    );\n    return new Value('static');\n  }\n}\n\n/**\n * Dedupes and returns an array of all the keys of the received objects.\n */\nfunction getAllKeys(obj1: {} = {}, obj2: {} = {}): string[] {\n  return Object.keys({ ...obj1, ...obj2 });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus } from '@firebase/remote-config-types';\nimport {\n  FetchResponse,\n  FirebaseRemoteConfigObject\n} from '../client/remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { FirebaseError } from '@firebase/util';\n\n/**\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\n */\nfunction toFirebaseError(event: Event, errorCode: ErrorCode): FirebaseError {\n  const originalError = (event.target as IDBRequest).error || undefined;\n  return ERROR_FACTORY.create(errorCode, {\n    originalErrorMessage: originalError && originalError.message\n  });\n}\n\n/**\n * A general-purpose store keyed by app + namespace + {@link\n * ProjectNamespaceKeyFieldValue}.\n *\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\n *\n * <p>Visible for testing.\n */\nexport const APP_NAMESPACE_STORE = 'app_namespace_store';\n\nconst DB_NAME = 'firebase_remote_config';\nconst DB_VERSION = 1;\n\n/**\n * Encapsulates metadata concerning throttled fetch requests.\n */\nexport interface ThrottleMetadata {\n  // The number of times fetch has backed off. Used for resuming backoff after a timeout.\n  backoffCount: number;\n  // The Unix timestamp in milliseconds when callers can retry a request.\n  throttleEndTimeMillis: number;\n}\n\n/**\n * Provides type-safety for the \"key\" field used by {@link APP_NAMESPACE_STORE}.\n *\n * <p>This seems like a small price to avoid potentially subtle bugs caused by a typo.\n */\ntype ProjectNamespaceKeyFieldValue =\n  | 'active_config'\n  | 'active_config_etag'\n  | 'last_fetch_status'\n  | 'last_successful_fetch_timestamp_millis'\n  | 'last_successful_fetch_response'\n  | 'settings'\n  | 'throttle_metadata';\n\n// Visible for testing.\nexport function openDatabase(): Promise<IDBDatabase> {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n    request.onerror = event => {\n      reject(toFirebaseError(event, ErrorCode.STORAGE_OPEN));\n    };\n    request.onsuccess = event => {\n      resolve((event.target as IDBOpenDBRequest).result);\n    };\n    request.onupgradeneeded = event => {\n      const db = (event.target as IDBOpenDBRequest).result;\n\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (event.oldVersion) {\n        case 0:\n          db.createObjectStore(APP_NAMESPACE_STORE, {\n            keyPath: 'compositeKey'\n          });\n      }\n    };\n  });\n}\n\n/**\n * Abstracts data persistence.\n */\nexport class Storage {\n  /**\n   * @param appId enables storage segmentation by app (ID + name).\n   * @param appName enables storage segmentation by app (ID + name).\n   * @param namespace enables storage segmentation by namespace.\n   */\n  constructor(\n    private readonly appId: string,\n    private readonly appName: string,\n    private readonly namespace: string,\n    private readonly openDbPromise = openDatabase()\n  ) {}\n\n  getLastFetchStatus(): Promise<FetchStatus | undefined> {\n    return this.get<FetchStatus>('last_fetch_status');\n  }\n\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    return this.set<FetchStatus>('last_fetch_status', status);\n  }\n\n  // This is comparable to a cache entry timestamp. If we need to expire other data, we could\n  // consider adding timestamp to all storage records and an optional max age arg to getters.\n  getLastSuccessfulFetchTimestampMillis(): Promise<number | undefined> {\n    return this.get<number>('last_successful_fetch_timestamp_millis');\n  }\n\n  setLastSuccessfulFetchTimestampMillis(timestamp: number): Promise<void> {\n    return this.set<number>(\n      'last_successful_fetch_timestamp_millis',\n      timestamp\n    );\n  }\n\n  getLastSuccessfulFetchResponse(): Promise<FetchResponse | undefined> {\n    return this.get<FetchResponse>('last_successful_fetch_response');\n  }\n\n  setLastSuccessfulFetchResponse(response: FetchResponse): Promise<void> {\n    return this.set<FetchResponse>('last_successful_fetch_response', response);\n  }\n\n  getActiveConfig(): Promise<FirebaseRemoteConfigObject | undefined> {\n    return this.get<FirebaseRemoteConfigObject>('active_config');\n  }\n\n  setActiveConfig(config: FirebaseRemoteConfigObject): Promise<void> {\n    return this.set<FirebaseRemoteConfigObject>('active_config', config);\n  }\n\n  getActiveConfigEtag(): Promise<string | undefined> {\n    return this.get<string>('active_config_etag');\n  }\n\n  setActiveConfigEtag(etag: string): Promise<void> {\n    return this.set<string>('active_config_etag', etag);\n  }\n\n  getThrottleMetadata(): Promise<ThrottleMetadata | undefined> {\n    return this.get<ThrottleMetadata>('throttle_metadata');\n  }\n\n  setThrottleMetadata(metadata: ThrottleMetadata): Promise<void> {\n    return this.set<ThrottleMetadata>('throttle_metadata', metadata);\n  }\n\n  deleteThrottleMetadata(): Promise<void> {\n    return this.delete('throttle_metadata');\n  }\n\n  async get<T>(key: ProjectNamespaceKeyFieldValue): Promise<T | undefined> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.get(compositeKey);\n        request.onerror = event => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_GET));\n        };\n        request.onsuccess = event => {\n          const result = (event.target as IDBRequest).result;\n          if (result) {\n            resolve(result.value);\n          } else {\n            resolve(undefined);\n          }\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_GET, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  async set<T>(key: ProjectNamespaceKeyFieldValue, value: T): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.put({\n          compositeKey,\n          value\n        });\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_SET));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_SET, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  async delete(key: ProjectNamespaceKeyFieldValue): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.delete(compositeKey);\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_DELETE));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_DELETE, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  // Facilitates composite key functionality (which is unsupported in IE).\n  createCompositeKey(key: ProjectNamespaceKeyFieldValue): string {\n    return [this.appId, this.appName, this.namespace, key].join();\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus } from '@firebase/remote-config-types';\nimport { FirebaseRemoteConfigObject } from '../client/remote_config_fetch_client';\nimport { Storage } from './storage';\n\n/**\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\n */\nexport class StorageCache {\n  constructor(private readonly storage: Storage) {}\n\n  /**\n   * Memory caches.\n   */\n  private lastFetchStatus?: FetchStatus;\n  private lastSuccessfulFetchTimestampMillis?: number;\n  private activeConfig?: FirebaseRemoteConfigObject;\n\n  /**\n   * Memory-only getters\n   */\n  getLastFetchStatus(): FetchStatus | undefined {\n    return this.lastFetchStatus;\n  }\n\n  getLastSuccessfulFetchTimestampMillis(): number | undefined {\n    return this.lastSuccessfulFetchTimestampMillis;\n  }\n\n  getActiveConfig(): FirebaseRemoteConfigObject | undefined {\n    return this.activeConfig;\n  }\n\n  /**\n   * Read-ahead getter\n   */\n  async loadFromStorage(): Promise<void> {\n    const lastFetchStatusPromise = this.storage.getLastFetchStatus();\n    const lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();\n    const activeConfigPromise = this.storage.getActiveConfig();\n\n    // Note:\n    // 1. we consistently check for undefined to avoid clobbering defined values\n    //   in memory\n    // 2. we defer awaiting to improve readability, as opposed to destructuring\n    //   a Promise.all result, for example\n\n    const lastFetchStatus = await lastFetchStatusPromise;\n    if (lastFetchStatus) {\n      this.lastFetchStatus = lastFetchStatus;\n    }\n\n    const lastSuccessfulFetchTimestampMillis = await lastSuccessfulFetchTimestampMillisPromise;\n    if (lastSuccessfulFetchTimestampMillis) {\n      this.lastSuccessfulFetchTimestampMillis = lastSuccessfulFetchTimestampMillis;\n    }\n\n    const activeConfig = await activeConfigPromise;\n    if (activeConfig) {\n      this.activeConfig = activeConfig;\n    }\n  }\n\n  /**\n   * Write-through setters\n   */\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    this.lastFetchStatus = status;\n    return this.storage.setLastFetchStatus(status);\n  }\n\n  setLastSuccessfulFetchTimestampMillis(\n    timestampMillis: number\n  ): Promise<void> {\n    this.lastSuccessfulFetchTimestampMillis = timestampMillis;\n    return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\n  }\n\n  setActiveConfig(activeConfig: FirebaseRemoteConfigObject): Promise<void> {\n    this.activeConfig = activeConfig;\n    return this.storage.setActiveConfig(activeConfig);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RemoteConfigAbortSignal,\n  RemoteConfigFetchClient,\n  FetchResponse,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ThrottleMetadata, Storage } from '../storage/storage';\nimport { ErrorCode, ERROR_FACTORY } from '../errors';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nexport function setAbortableTimeout(\n  signal: RemoteConfigAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(ErrorCode.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): boolean {\n  if (!(e instanceof FirebaseError)) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Decorates a Client with retry logic.\n *\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\n * responses (because the SDK has no use for error responses).\n */\nexport class RetryingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage\n  ) {}\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const throttleMetadata = (await this.storage.getThrottleMetadata()) || {\n      backoffCount: 0,\n      throttleEndTimeMillis: Date.now()\n    };\n\n    return this.attemptFetch(request, throttleMetadata);\n  }\n\n  /**\n   * A recursive helper for attempting a fetch request repeatedly.\n   *\n   * @throws any non-retriable errors.\n   */\n  async attemptFetch(\n    request: FetchRequest,\n    { throttleEndTimeMillis, backoffCount }: ThrottleMetadata\n  ): Promise<FetchResponse> {\n    // Starts with a (potentially zero) timeout to support resumption from stored state.\n    // Ensures the throttle end time is honored if the last attempt timed out.\n    // Note the SDK will never make a request if the fetch timeout expires at this point.\n    await setAbortableTimeout(request.signal, throttleEndTimeMillis);\n\n    try {\n      const response = await this.client.fetch(request);\n\n      // Note the SDK only clears throttle state if response is success or non-retriable.\n      await this.storage.deleteThrottleMetadata();\n\n      return response;\n    } catch (e) {\n      if (!isRetriableError(e)) {\n        throw e;\n      }\n\n      // Increments backoff state.\n      const throttleMetadata = {\n        throttleEndTimeMillis:\n          Date.now() + calculateBackoffMillis(backoffCount),\n        backoffCount: backoffCount + 1\n      };\n\n      // Persists state.\n      await this.storage.setThrottleMetadata(throttleMetadata);\n\n      return this.attemptFetch(request, throttleMetadata);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { RemoteConfig as RemoteConfigType } from '@firebase/remote-config-types';\nimport { CachingClient } from './src/client/caching_client';\nimport { RestClient } from './src/client/rest_client';\nimport { RemoteConfig } from './src/remote_config';\nimport { Storage } from './src/storage/storage';\nimport { StorageCache } from './src/storage/storage_cache';\nimport { ERROR_FACTORY, ErrorCode } from './src/errors';\nimport { RetryingClient } from './src/client/retrying_client';\nimport { Logger, LogLevel as FirebaseLogLevel } from '@firebase/logger';\nimport { name as packageName, version } from './package.json';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\n\n// Facilitates debugging by enabling settings changes without rebuilding asset.\n// Note these debug options are not part of a documented, supported API and can change at any time.\n// Consolidates debug options for easier discovery.\n// Uses transient variables on window to avoid lingering state causing panic.\ndeclare global {\n  interface Window {\n    FIREBASE_REMOTE_CONFIG_URL_BASE: string;\n  }\n}\n\nexport function registerRemoteConfig(\n  firebaseInstance: _FirebaseNamespace\n): void {\n  firebaseInstance.INTERNAL.registerComponent(\n    new Component(\n      'remoteConfig',\n      remoteConfigFactory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n\n  firebaseInstance.registerVersion(packageName, version);\n\n  function remoteConfigFactory(\n    container: ComponentContainer,\n    namespace?: string\n  ): RemoteConfig {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    // The following call will always succeed because rc has `import '@firebase/installations'`\n    const installations = container.getProvider('installations').getImmediate();\n\n    // Guards against the SDK being used in non-browser environments.\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_WINDOW);\n    }\n\n    // Normalizes optional inputs.\n    const { projectId, apiKey, appId } = app.options;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_PROJECT_ID);\n    }\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_API_KEY);\n    }\n    if (!appId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_APP_ID);\n    }\n    namespace = namespace || 'firebase';\n\n    const storage = new Storage(appId, app.name, namespace);\n    const storageCache = new StorageCache(storage);\n\n    const logger = new Logger(packageName);\n\n    // Sets ERROR as the default log level.\n    // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\n    logger.logLevel = FirebaseLogLevel.ERROR;\n\n    const restClient = new RestClient(\n      installations,\n      // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\n      firebaseInstance.SDK_VERSION,\n      namespace,\n      projectId,\n      apiKey,\n      appId\n    );\n    const retryingClient = new RetryingClient(restClient, storage);\n    const cachingClient = new CachingClient(\n      retryingClient,\n      storage,\n      storageCache,\n      logger\n    );\n\n    const remoteConfigInstance = new RemoteConfig(\n      app,\n      cachingClient,\n      storageCache,\n      storage,\n      logger\n    );\n\n    // Starts warming cache.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    remoteConfigInstance.ensureInitialized();\n\n    return remoteConfigInstance;\n  }\n}\n\nregisterRemoteConfig(firebase as _FirebaseNamespace);\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    remoteConfig?: {\n      (app?: FirebaseApp): RemoteConfigType;\n    };\n  }\n  interface FirebaseApp {\n    remoteConfig(): RemoteConfigType;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}