{"ast":null,"code":"import { __awaiter, __generator, __assign } from 'tslib';\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { Logger } from '@firebase/logger';\nimport { ErrorFactory, calculateBackoffMillis, FirebaseError, validateIndexedDBOpenable, isIndexedDBAvailable, isBrowserExtension, areCookiesEnabled } from '@firebase/util';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Key to attach FID to in gtag params.\n\nvar GA_FID_KEY = 'firebase_id';\nvar ORIGIN_KEY = 'origin';\nvar FETCH_TIMEOUT_MILLIS = 60 * 1000;\nvar DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\nvar GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\nvar GtagCommand;\n\n(function (GtagCommand) {\n  GtagCommand[\"EVENT\"] = \"event\";\n  GtagCommand[\"SET\"] = \"set\";\n  GtagCommand[\"CONFIG\"] = \"config\";\n})(GtagCommand || (GtagCommand = {}));\n/*\r\n * Officially recommended event names for gtag.js\r\n * Any other string is also allowed.\r\n */\n\n\nvar EventName;\n\n(function (EventName) {\n  EventName[\"ADD_SHIPPING_INFO\"] = \"add_shipping_info\";\n  EventName[\"ADD_PAYMENT_INFO\"] = \"add_payment_info\";\n  EventName[\"ADD_TO_CART\"] = \"add_to_cart\";\n  EventName[\"ADD_TO_WISHLIST\"] = \"add_to_wishlist\";\n  EventName[\"BEGIN_CHECKOUT\"] = \"begin_checkout\";\n  /** @deprecated */\n\n  EventName[\"CHECKOUT_PROGRESS\"] = \"checkout_progress\";\n  EventName[\"EXCEPTION\"] = \"exception\";\n  EventName[\"GENERATE_LEAD\"] = \"generate_lead\";\n  EventName[\"LOGIN\"] = \"login\";\n  EventName[\"PAGE_VIEW\"] = \"page_view\";\n  EventName[\"PURCHASE\"] = \"purchase\";\n  EventName[\"REFUND\"] = \"refund\";\n  EventName[\"REMOVE_FROM_CART\"] = \"remove_from_cart\";\n  EventName[\"SCREEN_VIEW\"] = \"screen_view\";\n  EventName[\"SEARCH\"] = \"search\";\n  EventName[\"SELECT_CONTENT\"] = \"select_content\";\n  EventName[\"SELECT_ITEM\"] = \"select_item\";\n  EventName[\"SELECT_PROMOTION\"] = \"select_promotion\";\n  /** @deprecated */\n\n  EventName[\"SET_CHECKOUT_OPTION\"] = \"set_checkout_option\";\n  EventName[\"SHARE\"] = \"share\";\n  EventName[\"SIGN_UP\"] = \"sign_up\";\n  EventName[\"TIMING_COMPLETE\"] = \"timing_complete\";\n  EventName[\"VIEW_CART\"] = \"view_cart\";\n  EventName[\"VIEW_ITEM\"] = \"view_item\";\n  EventName[\"VIEW_ITEM_LIST\"] = \"view_item_list\";\n  EventName[\"VIEW_PROMOTION\"] = \"view_promotion\";\n  EventName[\"VIEW_SEARCH_RESULTS\"] = \"view_search_results\";\n})(EventName || (EventName = {}));\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\n\n\nfunction logEvent(gtagFunction, initializationPromise, eventName, eventParams, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var measurementId, params;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!(options && options.global)) return [3\n          /*break*/\n          , 1];\n          gtagFunction(GtagCommand.EVENT, eventName, eventParams);\n          return [2\n          /*return*/\n          ];\n\n        case 1:\n          return [4\n          /*yield*/\n          , initializationPromise];\n\n        case 2:\n          measurementId = _a.sent();\n          params = __assign(__assign({}, eventParams), {\n            'send_to': measurementId\n          });\n          gtagFunction(GtagCommand.EVENT, eventName, params);\n          _a.label = 3;\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Set screen_name parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param screenName Screen name string to set.\r\n */\n\n\nfunction setCurrentScreen(gtagFunction, initializationPromise, screenName, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var measurementId;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!(options && options.global)) return [3\n          /*break*/\n          , 1];\n          gtagFunction(GtagCommand.SET, {\n            'screen_name': screenName\n          });\n          return [2\n          /*return*/\n          , Promise.resolve()];\n\n        case 1:\n          return [4\n          /*yield*/\n          , initializationPromise];\n\n        case 2:\n          measurementId = _a.sent();\n          gtagFunction(GtagCommand.CONFIG, measurementId, {\n            update: true,\n            'screen_name': screenName\n          });\n          _a.label = 3;\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Set user_id parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param id User ID string to set\r\n */\n\n\nfunction setUserId(gtagFunction, initializationPromise, id, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var measurementId;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!(options && options.global)) return [3\n          /*break*/\n          , 1];\n          gtagFunction(GtagCommand.SET, {\n            'user_id': id\n          });\n          return [2\n          /*return*/\n          , Promise.resolve()];\n\n        case 1:\n          return [4\n          /*yield*/\n          , initializationPromise];\n\n        case 2:\n          measurementId = _a.sent();\n          gtagFunction(GtagCommand.CONFIG, measurementId, {\n            update: true,\n            'user_id': id\n          });\n          _a.label = 3;\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Set all other user properties other than user_id and screen_name.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param properties Map of user properties to set\r\n */\n\n\nfunction setUserProperties(gtagFunction, initializationPromise, properties, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var flatProperties, _i, _a, key, measurementId;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          if (!(options && options.global)) return [3\n          /*break*/\n          , 1];\n          flatProperties = {};\n\n          for (_i = 0, _a = Object.keys(properties); _i < _a.length; _i++) {\n            key = _a[_i]; // use dot notation for merge behavior in gtag.js\n\n            flatProperties[\"user_properties.\" + key] = properties[key];\n          }\n\n          gtagFunction(GtagCommand.SET, flatProperties);\n          return [2\n          /*return*/\n          , Promise.resolve()];\n\n        case 1:\n          return [4\n          /*yield*/\n          , initializationPromise];\n\n        case 2:\n          measurementId = _b.sent();\n          gtagFunction(GtagCommand.CONFIG, measurementId, {\n            update: true,\n            'user_properties': properties\n          });\n          _b.label = 3;\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Set whether collection is enabled for this ID.\r\n *\r\n * @param enabled If true, collection is enabled for this ID.\r\n */\n\n\nfunction setAnalyticsCollectionEnabled(initializationPromise, enabled) {\n  return __awaiter(this, void 0, void 0, function () {\n    var measurementId;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , initializationPromise];\n\n        case 1:\n          measurementId = _a.sent();\n          window[\"ga-disable-\" + measurementId] = !enabled;\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar logger = new Logger('@firebase/analytics');\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Inserts gtag script tag into the page to asynchronously download gtag.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\n\nfunction insertScriptTag(dataLayerName) {\n  var script = document.createElement('script'); // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n\n  script.src = GTAG_URL + \"?l=\" + dataLayerName;\n  script.async = true;\n  document.head.appendChild(script);\n}\n/**\r\n * Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\n\n\nfunction getOrCreateDataLayer(dataLayerName) {\n  // Check for existing dataLayer and create if needed.\n  var dataLayer = [];\n\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName];\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n\n  return dataLayer;\n}\n/**\r\n * Wrapped gtag logic when gtag is called with 'config' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param measurementId GA Measurement ID to set config for.\r\n * @param gtagParams Gtag config params to set.\r\n */\n\n\nfunction gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {\n  return __awaiter(this, void 0, void 0, function () {\n    var correspondingAppId, dynamicConfigResults, foundConfig, e_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          correspondingAppId = measurementIdToAppId[measurementId];\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1, 7,, 8]);\n\n          if (!correspondingAppId) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , initializationPromisesMap[correspondingAppId]];\n\n        case 2:\n          _a.sent();\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 3:\n          return [4\n          /*yield*/\n          , Promise.all(dynamicConfigPromisesList)];\n\n        case 4:\n          dynamicConfigResults = _a.sent();\n          foundConfig = dynamicConfigResults.find(function (config) {\n            return config.measurementId === measurementId;\n          });\n          if (!foundConfig) return [3\n          /*break*/\n          , 6];\n          return [4\n          /*yield*/\n          , initializationPromisesMap[foundConfig.appId]];\n\n        case 5:\n          _a.sent();\n\n          _a.label = 6;\n\n        case 6:\n          return [3\n          /*break*/\n          , 8];\n\n        case 7:\n          e_1 = _a.sent();\n          logger.error(e_1);\n          return [3\n          /*break*/\n          , 8];\n\n        case 8:\n          gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Wrapped gtag logic when gtag is called with 'event' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementId GA Measurement ID to log event to.\r\n * @param gtagParams Params to log with this event.\r\n */\n\n\nfunction gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {\n  return __awaiter(this, void 0, void 0, function () {\n    var initializationPromisesToWaitFor, gaSendToList, dynamicConfigResults, _loop_1, _i, gaSendToList_1, sendToId, state_1, e_2;\n\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 4,, 5]);\n\n          initializationPromisesToWaitFor = [];\n          if (!(gtagParams && gtagParams['send_to'])) return [3\n          /*break*/\n          , 2];\n          gaSendToList = gtagParams['send_to']; // Make it an array if is isn't, so it can be dealt with the same way.\n\n          if (!Array.isArray(gaSendToList)) {\n            gaSendToList = [gaSendToList];\n          }\n\n          return [4\n          /*yield*/\n          , Promise.all(dynamicConfigPromisesList)];\n\n        case 1:\n          dynamicConfigResults = _a.sent();\n\n          _loop_1 = function (sendToId) {\n            // Any fetched dynamic measurement ID that matches this 'send_to' ID\n            var foundConfig = dynamicConfigResults.find(function (config) {\n              return config.measurementId === sendToId;\n            });\n            var initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];\n\n            if (initializationPromise) {\n              initializationPromisesToWaitFor.push(initializationPromise);\n            } else {\n              // Found an item in 'send_to' that is not associated\n              // directly with an FID, possibly a group.  Empty this array,\n              // exit the loop early, and let it get populated below.\n              initializationPromisesToWaitFor = [];\n              return \"break\";\n            }\n          };\n\n          for (_i = 0, gaSendToList_1 = gaSendToList; _i < gaSendToList_1.length; _i++) {\n            sendToId = gaSendToList_1[_i];\n            state_1 = _loop_1(sendToId);\n            if (state_1 === \"break\") break;\n          }\n\n          _a.label = 2;\n\n        case 2:\n          // This will be unpopulated if there was no 'send_to' field , or\n          // if not all entries in the 'send_to' field could be mapped to\n          // a FID. In these cases, wait on all pending initialization promises.\n          if (initializationPromisesToWaitFor.length === 0) {\n            initializationPromisesToWaitFor = Object.values(initializationPromisesMap);\n          } // Run core gtag function with args after all relevant initialization\n          // promises have been resolved.\n\n\n          return [4\n          /*yield*/\n          , Promise.all(initializationPromisesToWaitFor)];\n\n        case 3:\n          // Run core gtag function with args after all relevant initialization\n          // promises have been resolved.\n          _a.sent(); // Workaround for http://b/141370449 - third argument cannot be undefined.\n\n\n          gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\n          return [3\n          /*break*/\n          , 5];\n\n        case 4:\n          e_2 = _a.sent();\n          logger.error(e_2);\n          return [3\n          /*break*/\n          , 5];\n\n        case 5:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n */\n\n\nfunction wrapGtag(gtagCore,\n/**\r\n * Allows wrapped gtag calls to wait on whichever intialization promises are required,\r\n * depending on the contents of the gtag params' `send_to` field, if any.\r\n */\ninitializationPromisesMap,\n/**\r\n * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\r\n * before determining what initialization promises (which include FIDs) to wait for.\r\n */\ndynamicConfigPromisesList,\n/**\r\n * Wrapped gtag config calls can narrow down which initialization promise (with FID)\r\n * to wait for if the measurementId is already fetched, by getting the corresponding appId,\r\n * which is the key for the initialization promises map.\r\n */\nmeasurementIdToAppId) {\n  /**\r\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\r\n   * @param command Gtag command type.\r\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\r\n   * @param gtagParams Params if event is EVENT/CONFIG.\r\n   */\n  function gtagWrapper(command, idOrNameOrParams, gtagParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 6,, 7]);\n\n            if (!(command === GtagCommand.EVENT)) return [3\n            /*break*/\n            , 2]; // If EVENT, second arg must be measurementId.\n\n            return [4\n            /*yield*/\n            , gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, idOrNameOrParams, gtagParams)];\n\n          case 1:\n            // If EVENT, second arg must be measurementId.\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 2:\n            if (!(command === GtagCommand.CONFIG)) return [3\n            /*break*/\n            , 4]; // If CONFIG, second arg must be measurementId.\n\n            return [4\n            /*yield*/\n            , gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, idOrNameOrParams, gtagParams)];\n\n          case 3:\n            // If CONFIG, second arg must be measurementId.\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            // If SET, second arg must be params.\n            gtagCore(GtagCommand.SET, idOrNameOrParams);\n            _a.label = 5;\n\n          case 5:\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            e_3 = _a.sent();\n            logger.error(e_3);\n            return [3\n            /*break*/\n            , 7];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }\n\n  return gtagWrapper;\n}\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\r\n */\n\n\nfunction wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {\n  // Create a basic core gtag function\n  var gtagCore = function () {\n    var _args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      _args[_i] = arguments[_i];\n    } // Must push IArguments object, not an array.\n\n\n    window[dataLayerName].push(arguments);\n  }; // Replace it with existing one if found\n\n\n  if (window[gtagFunctionName] && typeof window[gtagFunctionName] === 'function') {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);\n  return {\n    gtagCore: gtagCore,\n    wrappedGtag: window[gtagFunctionName]\n  };\n}\n/**\r\n * Returns first script tag in DOM matching our gtag url pattern.\r\n */\n\n\nfunction findGtagScriptOnPage() {\n  var scriptTags = window.document.getElementsByTagName('script');\n\n  for (var _i = 0, _a = Object.values(scriptTags); _i < _a.length; _i++) {\n    var tag = _a[_i];\n\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n\n  return null;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar _a;\n\nvar ERRORS = (_a = {}, _a[\"already-exists\"\n/* ALREADY_EXISTS */\n] = 'A Firebase Analytics instance with the appId {$id} ' + ' already exists. ' + 'Only one Firebase Analytics instance can be created for each appId.', _a[\"already-initialized\"\n/* ALREADY_INITIALIZED */\n] = 'Firebase Analytics has already been initialized.' + 'settings() must be called before initializing any Analytics instance' + 'or it will have no effect.', _a[\"interop-component-reg-failed\"\n/* INTEROP_COMPONENT_REG_FAILED */\n] = 'Firebase Analytics Interop Component failed to instantiate: {$reason}', _a[\"invalid-analytics-context\"\n/* INVALID_ANALYTICS_CONTEXT */\n] = 'Firebase Analytics is not supported in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}', _a[\"indexeddb-unavailable\"\n/* INDEXEDDB_UNAVAILABLE */\n] = 'IndexedDB unavailable or restricted in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}', _a[\"fetch-throttle\"\n/* FETCH_THROTTLE */\n] = 'The config fetch request timed out while in an exponential backoff state.' + ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.', _a[\"config-fetch-failed\"\n/* CONFIG_FETCH_FAILED */\n] = 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}', _a[\"no-api-key\"\n/* NO_API_KEY */\n] = 'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid API key.', _a[\"no-app-id\"\n/* NO_APP_ID */\n] = 'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid app ID.', _a);\nvar ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Backoff factor for 503 errors, which we want to be conservative about\r\n * to avoid overloading servers. Each retry interval will be\r\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\r\n * will be ~30 seconds (with fuzzing).\r\n */\n\nvar LONG_RETRY_FACTOR = 30;\n/**\r\n * Base wait interval to multiplied by backoffFactor^backoffCount.\r\n */\n\nvar BASE_INTERVAL_MILLIS = 1000;\n/**\r\n * Stubbable retry data storage class.\r\n */\n\nvar RetryData =\n/** @class */\nfunction () {\n  function RetryData(throttleMetadata, intervalMillis) {\n    if (throttleMetadata === void 0) {\n      throttleMetadata = {};\n    }\n\n    if (intervalMillis === void 0) {\n      intervalMillis = BASE_INTERVAL_MILLIS;\n    }\n\n    this.throttleMetadata = throttleMetadata;\n    this.intervalMillis = intervalMillis;\n  }\n\n  RetryData.prototype.getThrottleMetadata = function (appId) {\n    return this.throttleMetadata[appId];\n  };\n\n  RetryData.prototype.setThrottleMetadata = function (appId, metadata) {\n    this.throttleMetadata[appId] = metadata;\n  };\n\n  RetryData.prototype.deleteThrottleMetadata = function (appId) {\n    delete this.throttleMetadata[appId];\n  };\n\n  return RetryData;\n}();\n\nvar defaultRetryData = new RetryData();\n/**\r\n * Set GET request headers.\r\n * @param apiKey App API key.\r\n */\n\nfunction getHeaders(apiKey) {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n/**\r\n * Fetches dynamic config from backend.\r\n * @param app Firebase app to fetch config for.\r\n */\n\n\nfunction fetchDynamicConfig(appFields) {\n  var _a;\n\n  return __awaiter(this, void 0, void 0, function () {\n    var appId, apiKey, request, appUrl, response, errorMessage, jsonResponse, _ignored_1;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          appId = appFields.appId, apiKey = appFields.apiKey;\n          request = {\n            method: 'GET',\n            headers: getHeaders(apiKey)\n          };\n          appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n          return [4\n          /*yield*/\n          , fetch(appUrl, request)];\n\n        case 1:\n          response = _b.sent();\n          if (!(response.status !== 200 && response.status !== 304)) return [3\n          /*break*/\n          , 6];\n          errorMessage = '';\n          _b.label = 2;\n\n        case 2:\n          _b.trys.push([2, 4,, 5]);\n\n          return [4\n          /*yield*/\n          , response.json()];\n\n        case 3:\n          jsonResponse = _b.sent();\n\n          if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {\n            errorMessage = jsonResponse.error.message;\n          }\n\n          return [3\n          /*break*/\n          , 5];\n\n        case 4:\n          _ignored_1 = _b.sent();\n          return [3\n          /*break*/\n          , 5];\n\n        case 5:\n          throw ERROR_FACTORY.create(\"config-fetch-failed\"\n          /* CONFIG_FETCH_FAILED */\n          , {\n            httpStatus: response.status,\n            responseMessage: errorMessage\n          });\n\n        case 6:\n          return [2\n          /*return*/\n          , response.json()];\n      }\n    });\n  });\n}\n/**\r\n * Fetches dynamic config from backend, retrying if failed.\r\n * @param app Firebase app to fetch config for.\r\n */\n\n\nfunction fetchDynamicConfigWithRetry(app, // retryData and timeoutMillis are parameterized to allow passing a different value for testing.\nretryData, timeoutMillis) {\n  if (retryData === void 0) {\n    retryData = defaultRetryData;\n  }\n\n  return __awaiter(this, void 0, void 0, function () {\n    var _a, appId, apiKey, measurementId, throttleMetadata, signal;\n\n    var _this = this;\n\n    return __generator(this, function (_b) {\n      _a = app.options, appId = _a.appId, apiKey = _a.apiKey, measurementId = _a.measurementId;\n\n      if (!appId) {\n        throw ERROR_FACTORY.create(\"no-app-id\"\n        /* NO_APP_ID */\n        );\n      }\n\n      if (!apiKey) {\n        if (measurementId) {\n          return [2\n          /*return*/\n          , {\n            measurementId: measurementId,\n            appId: appId\n          }];\n        }\n\n        throw ERROR_FACTORY.create(\"no-api-key\"\n        /* NO_API_KEY */\n        );\n      }\n\n      throttleMetadata = retryData.getThrottleMetadata(appId) || {\n        backoffCount: 0,\n        throttleEndTimeMillis: Date.now()\n      };\n      signal = new AnalyticsAbortSignal();\n      setTimeout(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n            signal.abort();\n            return [2\n            /*return*/\n            ];\n          });\n        });\n      }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);\n      return [2\n      /*return*/\n      , attemptFetchDynamicConfigWithRetry({\n        appId: appId,\n        apiKey: apiKey,\n        measurementId: measurementId\n      }, throttleMetadata, signal, retryData)];\n    });\n  });\n}\n/**\r\n * Runs one retry attempt.\r\n * @param appFields Necessary app config fields.\r\n * @param throttleMetadata Ongoing metadata to determine throttling times.\r\n * @param signal Abort signal.\r\n */\n\n\nfunction attemptFetchDynamicConfigWithRetry(appFields, _a, signal, retryData // for testing\n) {\n  var throttleEndTimeMillis = _a.throttleEndTimeMillis,\n      backoffCount = _a.backoffCount;\n\n  if (retryData === void 0) {\n    retryData = defaultRetryData;\n  }\n\n  return __awaiter(this, void 0, void 0, function () {\n    var appId, measurementId, e_1, response, e_2, backoffMillis, throttleMetadata;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          appId = appFields.appId, measurementId = appFields.measurementId;\n          _b.label = 1;\n\n        case 1:\n          _b.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , setAbortableTimeout(signal, throttleEndTimeMillis)];\n\n        case 2:\n          _b.sent();\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          e_1 = _b.sent();\n\n          if (measurementId) {\n            logger.warn(\"Timed out fetching this Firebase app's measurement ID from the server.\" + (\" Falling back to the measurement ID \" + measurementId) + (\" provided in the \\\"measurementId\\\" field in the local Firebase config. [\" + e_1.message + \"]\"));\n            return [2\n            /*return*/\n            , {\n              appId: appId,\n              measurementId: measurementId\n            }];\n          }\n\n          throw e_1;\n\n        case 4:\n          _b.trys.push([4, 6,, 7]);\n\n          return [4\n          /*yield*/\n          , fetchDynamicConfig(appFields)];\n\n        case 5:\n          response = _b.sent(); // Note the SDK only clears throttle state if response is success or non-retriable.\n\n          retryData.deleteThrottleMetadata(appId);\n          return [2\n          /*return*/\n          , response];\n\n        case 6:\n          e_2 = _b.sent();\n\n          if (!isRetriableError(e_2)) {\n            retryData.deleteThrottleMetadata(appId);\n\n            if (measurementId) {\n              logger.warn(\"Failed to fetch this Firebase app's measurement ID from the server.\" + (\" Falling back to the measurement ID \" + measurementId) + (\" provided in the \\\"measurementId\\\" field in the local Firebase config. [\" + e_2.message + \"]\"));\n              return [2\n              /*return*/\n              , {\n                appId: appId,\n                measurementId: measurementId\n              }];\n            } else {\n              throw e_2;\n            }\n          }\n\n          backoffMillis = Number(e_2.httpStatus) === 503 ? calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR) : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n          throttleMetadata = {\n            throttleEndTimeMillis: Date.now() + backoffMillis,\n            backoffCount: backoffCount + 1\n          }; // Persists state.\n\n          retryData.setThrottleMetadata(appId, throttleMetadata);\n          logger.debug(\"Calling attemptFetch again in \" + backoffMillis + \" millis\");\n          return [2\n          /*return*/\n          , attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData)];\n\n        case 7:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\n\n\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\n  return new Promise(function (resolve, reject) {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n    var timeout = setTimeout(resolve, backoffMillis); // Adds listener, rather than sets onabort, because signal is a shared object.\n\n    signal.addEventListener(function () {\n      clearTimeout(timeout); // If the request completes before this timeout, the rejection has no effect.\n\n      reject(ERROR_FACTORY.create(\"fetch-throttle\"\n      /* FETCH_THROTTLE */\n      , {\n        throttleEndTimeMillis: throttleEndTimeMillis\n      }));\n    });\n  });\n}\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\n\n\nfunction isRetriableError(e) {\n  if (!(e instanceof FirebaseError)) {\n    return false;\n  } // Uses string index defined by ErrorData, which FirebaseError implements.\n\n\n  var httpStatus = Number(e['httpStatus']);\n  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;\n}\n/**\r\n * Shims a minimal AbortSignal (copied from Remote Config).\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\n\n\nvar AnalyticsAbortSignal =\n/** @class */\nfunction () {\n  function AnalyticsAbortSignal() {\n    this.listeners = [];\n  }\n\n  AnalyticsAbortSignal.prototype.addEventListener = function (listener) {\n    this.listeners.push(listener);\n  };\n\n  AnalyticsAbortSignal.prototype.abort = function () {\n    this.listeners.forEach(function (listener) {\n      return listener();\n    });\n  };\n\n  return AnalyticsAbortSignal;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction validateIndexedDB() {\n  return __awaiter(this, void 0, void 0, function () {\n    var e_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!!isIndexedDBAvailable()) return [3\n          /*break*/\n          , 1];\n          logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\"\n          /* INDEXEDDB_UNAVAILABLE */\n          , {\n            errorInfo: 'IndexedDB is not available in this environment.'\n          }).message);\n          return [2\n          /*return*/\n          , false];\n\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , validateIndexedDBOpenable()];\n\n        case 2:\n          _a.sent();\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          e_1 = _a.sent();\n          logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\"\n          /* INDEXEDDB_UNAVAILABLE */\n          , {\n            errorInfo: e_1\n          }).message);\n          return [2\n          /*return*/\n          , false];\n\n        case 4:\n          return [2\n          /*return*/\n          , true];\n      }\n    });\n  });\n}\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\r\n * @param measurementIdToAppId Maps measurementID to appID.\r\n * @param installations FirebaseInstallations instance.\r\n *\r\n * @returns Measurement ID.\r\n */\n\n\nfunction initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore) {\n  return __awaiter(this, void 0, void 0, function () {\n    var dynamicConfigPromise, fidPromise, _a, dynamicConfig, fid, configProperties;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          dynamicConfigPromise = fetchDynamicConfigWithRetry(app); // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n\n          dynamicConfigPromise.then(function (config) {\n            measurementIdToAppId[config.measurementId] = config.appId;\n\n            if (app.options.measurementId && config.measurementId !== app.options.measurementId) {\n              logger.warn(\"The measurement ID in the local Firebase config (\" + app.options.measurementId + \")\" + (\" does not match the measurement ID fetched from the server (\" + config.measurementId + \").\") + \" To ensure analytics events are always sent to the correct Analytics property,\" + \" update the\" + \" measurement ID field in the local config or remove it from the local config.\");\n            }\n          }).catch(function (e) {\n            return logger.error(e);\n          }); // Add to list to track state of all dynamic config promises.\n\n          dynamicConfigPromisesList.push(dynamicConfigPromise);\n          fidPromise = validateIndexedDB().then(function (envIsValid) {\n            if (envIsValid) {\n              return installations.getId();\n            } else {\n              return undefined;\n            }\n          });\n          return [4\n          /*yield*/\n          , Promise.all([dynamicConfigPromise, fidPromise])];\n\n        case 1:\n          _a = _c.sent(), dynamicConfig = _a[0], fid = _a[1]; // This command initializes gtag.js and only needs to be called once for the entire web app,\n          // but since it is idempotent, we can call it multiple times.\n          // We keep it together with other initialization logic for better code structure.\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          gtagCore('js', new Date());\n          configProperties = (_b = {}, // guard against developers accidentally setting properties with prefix `firebase_`\n          _b[ORIGIN_KEY] = 'firebase', _b.update = true, _b);\n\n          if (fid != null) {\n            configProperties[GA_FID_KEY] = fid;\n          } // It should be the first config command called on this GA-ID\n          // Initialize this GA-ID and set FID on it using the gtag config API.\n\n\n          gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\n          return [2\n          /*return*/\n          , dynamicConfig.measurementId];\n      }\n    });\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\r\n * all or some of these, depending on the call's `send_to` param and the status\r\n * of the dynamic config fetches (see below).\r\n */\n\n\nvar initializationPromisesMap = {};\n/**\r\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\r\n * wait on all these to be complete in order to determine if it can selectively\r\n * wait for only certain initialization (FID) promises or if it must wait for all.\r\n */\n\nvar dynamicConfigPromisesList = [];\n/**\r\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\r\n * fetch completes. If already populated, gtag config calls can use this to\r\n * selectively wait for only this app's initialization promise (FID) instead of all\r\n * initialization promises.\r\n */\n\nvar measurementIdToAppId = {};\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\n\nvar dataLayerName = 'dataLayer';\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\n\nvar gtagName = 'gtag';\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\n\nvar gtagCoreFunction;\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\n\nvar wrappedGtagFunction;\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\n\nvar globalInitDone = false;\n/**\r\n * For testing\r\n */\n\nfunction resetGlobalVars(newGlobalInitDone, newInitializationPromisesMap, newDynamicPromises) {\n  if (newGlobalInitDone === void 0) {\n    newGlobalInitDone = false;\n  }\n\n  if (newInitializationPromisesMap === void 0) {\n    newInitializationPromisesMap = {};\n  }\n\n  if (newDynamicPromises === void 0) {\n    newDynamicPromises = [];\n  }\n\n  globalInitDone = newGlobalInitDone;\n  initializationPromisesMap = newInitializationPromisesMap;\n  dynamicConfigPromisesList = newDynamicPromises;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n/**\r\n * For testing\r\n */\n\n\nfunction getGlobalVars() {\n  return {\n    initializationPromisesMap: initializationPromisesMap,\n    dynamicConfigPromisesList: dynamicConfigPromisesList\n  };\n}\n/**\r\n * This must be run before calling firebase.analytics() or it won't\r\n * have any effect.\r\n * @param options Custom gtag and dataLayer names.\r\n */\n\n\nfunction settings(options) {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(\"already-initialized\"\n    /* ALREADY_INITIALIZED */\n    );\n  }\n\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n/**\r\n * Returns true if no environment mismatch is found.\r\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\r\n * error that also lists details for each mismatch found.\r\n */\n\n\nfunction warnOnBrowserContextMismatch() {\n  var mismatchedEnvMessages = [];\n\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n\n  if (mismatchedEnvMessages.length > 0) {\n    var details = mismatchedEnvMessages.map(function (message, index) {\n      return \"(\" + (index + 1) + \") \" + message;\n    }).join(' ');\n    var err = ERROR_FACTORY.create(\"invalid-analytics-context\"\n    /* INVALID_ANALYTICS_CONTEXT */\n    , {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n\nfunction factory(app, installations) {\n  warnOnBrowserContextMismatch();\n  var appId = app.options.appId;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(\"no-app-id\"\n    /* NO_APP_ID */\n    );\n  }\n\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\"The \\\"apiKey\\\" field is empty in the local Firebase config. This is needed to fetch the latest\" + (\" measurement ID for this Firebase app. Falling back to the measurement ID \" + app.options.measurementId) + \" provided in the \\\"measurementId\\\" field in the local Firebase config.\");\n    } else {\n      throw ERROR_FACTORY.create(\"no-api-key\"\n      /* NO_API_KEY */\n      );\n    }\n  }\n\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(\"already-exists\"\n    /* ALREADY_EXISTS */\n    , {\n      id: appId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n    // Detect if user has already put the gtag <script> tag on this page.\n    if (!findGtagScriptOnPage()) {\n      insertScriptTag(dataLayerName);\n    }\n\n    getOrCreateDataLayer(dataLayerName);\n\n    var _a = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName),\n        wrappedGtag = _a.wrappedGtag,\n        gtagCore = _a.gtagCore;\n\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n    globalInitDone = true;\n  } // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n\n\n  initializationPromisesMap[appId] = initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction);\n  var analyticsInstance = {\n    app: app,\n    // Public methods return void for API simplicity and to better match gtag,\n    // while internal implementations return promises.\n    logEvent: function (eventName, eventParams, options) {\n      logEvent(wrappedGtagFunction, initializationPromisesMap[appId], eventName, eventParams, options).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    setCurrentScreen: function (screenName, options) {\n      setCurrentScreen(wrappedGtagFunction, initializationPromisesMap[appId], screenName, options).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    setUserId: function (id, options) {\n      setUserId(wrappedGtagFunction, initializationPromisesMap[appId], id, options).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    setUserProperties: function (properties, options) {\n      setUserProperties(wrappedGtagFunction, initializationPromisesMap[appId], properties, options).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    setAnalyticsCollectionEnabled: function (enabled) {\n      setAnalyticsCollectionEnabled(initializationPromisesMap[appId], enabled).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    INTERNAL: {\n      delete: function () {\n        delete initializationPromisesMap[appId];\n        return Promise.resolve();\n      }\n    }\n  };\n  return analyticsInstance;\n}\n\nvar name = \"@firebase/analytics\";\nvar version = \"0.6.0\";\n/**\r\n * Type constant for Firebase Analytics.\r\n */\n\nvar ANALYTICS_TYPE = 'analytics';\n\nfunction registerAnalytics(instance) {\n  instance.INTERNAL.registerComponent(new Component(ANALYTICS_TYPE, function (container) {\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var installations = container.getProvider('installations').getImmediate();\n    return factory(app, installations);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps({\n    settings: settings,\n    EventName: EventName,\n    isSupported: isSupported\n  }));\n  instance.INTERNAL.registerComponent(new Component('analytics-internal', internalFactory, \"PRIVATE\"\n  /* PRIVATE */\n  ));\n  instance.registerVersion(name, version);\n\n  function internalFactory(container) {\n    try {\n      var analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: analytics.logEvent\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(\"interop-component-reg-failed\"\n      /* INTEROP_COMPONENT_REG_FAILED */\n      , {\n        reason: e\n      });\n    }\n  }\n}\n\nregisterAnalytics(firebase);\n/**\r\n * this is a public static method provided to users that wraps four different checks:\r\n *\r\n * 1. check if it's not a browser extension environment.\r\n * 1. check if cookie is enabled in current browser.\r\n * 3. check if IndexedDB is supported by the browser environment.\r\n * 4. check if the current browser context is valid for using IndexedDB.\r\n *\r\n */\n\nfunction isSupported() {\n  return __awaiter(this, void 0, void 0, function () {\n    var isDBOpenable, error_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (isBrowserExtension()) {\n            return [2\n            /*return*/\n            , false];\n          }\n\n          if (!areCookiesEnabled()) {\n            return [2\n            /*return*/\n            , false];\n          }\n\n          if (!isIndexedDBAvailable()) {\n            return [2\n            /*return*/\n            , false];\n          }\n\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , validateIndexedDBOpenable()];\n\n        case 2:\n          isDBOpenable = _a.sent();\n          return [2\n          /*return*/\n          , isDBOpenable];\n\n        case 3:\n          error_1 = _a.sent();\n          return [2\n          /*return*/\n          , false];\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nexport { factory, getGlobalVars, registerAnalytics, resetGlobalVars, settings };","map":{"version":3,"sources":["../src/constants.ts","../src/functions.ts","../src/logger.ts","../src/helpers.ts","../src/errors.ts","../src/get-config.ts","../src/initialize-ids.ts","../src/factory.ts","../index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Key to attach FID to in gtag params.\nexport const GA_FID_KEY = 'firebase_id';\nexport const ORIGIN_KEY = 'origin';\n\nexport const FETCH_TIMEOUT_MILLIS = 60 * 1000;\n\nexport const DYNAMIC_CONFIG_URL =\n  'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\n\nexport const GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\nexport enum GtagCommand {\n  EVENT = 'event',\n  SET = 'set',\n  CONFIG = 'config'\n}\n\n/*\n * Officially recommended event names for gtag.js\n * Any other string is also allowed.\n */\nexport enum EventName {\n  ADD_SHIPPING_INFO = 'add_shipping_info',\n  ADD_PAYMENT_INFO = 'add_payment_info',\n  ADD_TO_CART = 'add_to_cart',\n  ADD_TO_WISHLIST = 'add_to_wishlist',\n  BEGIN_CHECKOUT = 'begin_checkout',\n  /** @deprecated */\n  CHECKOUT_PROGRESS = 'checkout_progress',\n  EXCEPTION = 'exception',\n  GENERATE_LEAD = 'generate_lead',\n  LOGIN = 'login',\n  PAGE_VIEW = 'page_view',\n  PURCHASE = 'purchase',\n  REFUND = 'refund',\n  REMOVE_FROM_CART = 'remove_from_cart',\n  SCREEN_VIEW = 'screen_view',\n  SEARCH = 'search',\n  SELECT_CONTENT = 'select_content',\n  SELECT_ITEM = 'select_item',\n  SELECT_PROMOTION = 'select_promotion',\n  /** @deprecated */\n  SET_CHECKOUT_OPTION = 'set_checkout_option',\n  SHARE = 'share',\n  SIGN_UP = 'sign_up',\n  TIMING_COMPLETE = 'timing_complete',\n  VIEW_CART = 'view_cart',\n  VIEW_ITEM = 'view_item',\n  VIEW_ITEM_LIST = 'view_item_list',\n  VIEW_PROMOTION = 'view_promotion',\n  VIEW_SEARCH_RESULTS = 'view_search_results'\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsCallOptions,\n  Gtag,\n  CustomParams,\n  ControlParams,\n  EventParams\n} from '@firebase/analytics-types';\nimport { GtagCommand } from './constants';\n/**\n * Logs an analytics event through the Firebase SDK.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\n * @param eventParams Analytics event parameters.\n */\nexport async function logEvent(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.EVENT, eventName, eventParams);\n    return;\n  } else {\n    const measurementId = await initializationPromise;\n    const params: EventParams | ControlParams = {\n      ...eventParams,\n      'send_to': measurementId\n    };\n    gtagFunction(GtagCommand.EVENT, eventName, params);\n  }\n}\n\n/**\n * Set screen_name parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param screenName Screen name string to set.\n */\nexport async function setCurrentScreen(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  screenName: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n\n/**\n * Set user_id parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param id User ID string to set\n */\nexport async function setUserId(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'user_id': id });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n\n/**\n * Set all other user properties other than user_id and screen_name.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param properties Map of user properties to set\n */\nexport async function setUserProperties(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    const flatProperties: { [key: string]: unknown } = {};\n    for (const key of Object.keys(properties)) {\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.${key}`] = properties[key];\n    }\n    gtagFunction(GtagCommand.SET, flatProperties);\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n\n/**\n * Set whether collection is enabled for this ID.\n *\n * @param enabled If true, collection is enabled for this ID.\n */\nexport async function setAnalyticsCollectionEnabled(\n  initializationPromise: Promise<string>,\n  enabled: boolean\n): Promise<void> {\n  const measurementId = await initializationPromise;\n  window[`ga-disable-${measurementId}`] = !enabled;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/analytics');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DynamicConfig,\n  DataLayer,\n  Gtag,\n  CustomParams,\n  ControlParams,\n  EventParams,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport { GtagCommand, GTAG_URL } from './constants';\nimport { logger } from './logger';\n\n/**\n * Inserts gtag script tag into the page to asynchronously download gtag.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function insertScriptTag(dataLayerName: string): void {\n  const script = document.createElement('script');\n  // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n  script.src = `${GTAG_URL}?l=${dataLayerName}`;\n  script.async = true;\n  document.head.appendChild(script);\n}\n\n/**\n * Get reference to, or create, global datalayer.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function getOrCreateDataLayer(dataLayerName: string): DataLayer {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer: DataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName] as DataLayer;\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'config' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param measurementId GA Measurement ID to set config for.\n * @param gtagParams Gtag config params to set.\n */\nasync function gtagOnConfig(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  // If config is already fetched, we know the appId and can use it to look up what FID promise we\n  /// are waiting for, and wait only on that one.\n  const correspondingAppId = measurementIdToAppId[measurementId as string];\n  try {\n    if (correspondingAppId) {\n      await initializationPromisesMap[correspondingAppId];\n    } else {\n      // If config is not fetched yet, wait for all configs (we don't know which one we need) and\n      // find the appId (if any) corresponding to this measurementId. If there is one, wait on\n      // that appId's initialization promise. If there is none, promise resolves and gtag\n      // call goes through.\n      const dynamicConfigResults = await Promise.all(dynamicConfigPromisesList);\n      const foundConfig = dynamicConfigResults.find(\n        config => config.measurementId === measurementId\n      );\n      if (foundConfig) {\n        await initializationPromisesMap[foundConfig.appId];\n      }\n    }\n  } catch (e) {\n    logger.error(e);\n  }\n  gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'event' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementId GA Measurement ID to log event to.\n * @param gtagParams Params to log with this event.\n */\nasync function gtagOnEvent(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  try {\n    let initializationPromisesToWaitFor: Array<Promise<string>> = [];\n\n    // If there's a 'send_to' param, check if any ID specified matches\n    // an initializeIds() promise we are waiting for.\n    if (gtagParams && gtagParams['send_to']) {\n      let gaSendToList: string | string[] = gtagParams['send_to'];\n      // Make it an array if is isn't, so it can be dealt with the same way.\n      if (!Array.isArray(gaSendToList)) {\n        gaSendToList = [gaSendToList];\n      }\n      // Checking 'send_to' fields requires having all measurement ID results back from\n      // the dynamic config fetch.\n      const dynamicConfigResults = await Promise.all(dynamicConfigPromisesList);\n      for (const sendToId of gaSendToList) {\n        // Any fetched dynamic measurement ID that matches this 'send_to' ID\n        const foundConfig = dynamicConfigResults.find(\n          config => config.measurementId === sendToId\n        );\n        const initializationPromise =\n          foundConfig && initializationPromisesMap[foundConfig.appId];\n        if (initializationPromise) {\n          initializationPromisesToWaitFor.push(initializationPromise);\n        } else {\n          // Found an item in 'send_to' that is not associated\n          // directly with an FID, possibly a group.  Empty this array,\n          // exit the loop early, and let it get populated below.\n          initializationPromisesToWaitFor = [];\n          break;\n        }\n      }\n    }\n\n    // This will be unpopulated if there was no 'send_to' field , or\n    // if not all entries in the 'send_to' field could be mapped to\n    // a FID. In these cases, wait on all pending initialization promises.\n    if (initializationPromisesToWaitFor.length === 0) {\n      initializationPromisesToWaitFor = Object.values(\n        initializationPromisesMap\n      );\n    }\n\n    // Run core gtag function with args after all relevant initialization\n    // promises have been resolved.\n    await Promise.all(initializationPromisesToWaitFor);\n    // Workaround for http://b/141370449 - third argument cannot be undefined.\n    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\n  } catch (e) {\n    logger.error(e);\n  }\n}\n\n/**\n * Wraps a standard gtag function with extra code to wait for completion of\n * relevant initialization promises before sending requests.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n */\nfunction wrapGtag(\n  gtagCore: Gtag,\n  /**\n   * Allows wrapped gtag calls to wait on whichever intialization promises are required,\n   * depending on the contents of the gtag params' `send_to` field, if any.\n   */\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  /**\n   * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\n   * before determining what initialization promises (which include FIDs) to wait for.\n   */\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  /**\n   * Wrapped gtag config calls can narrow down which initialization promise (with FID)\n   * to wait for if the measurementId is already fetched, by getting the corresponding appId,\n   * which is the key for the initialization promises map.\n   */\n  measurementIdToAppId: { [measurementId: string]: string }\n): Gtag {\n  /**\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\n   * @param command Gtag command type.\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\n   * @param gtagParams Params if event is EVENT/CONFIG.\n   */\n  async function gtagWrapper(\n    command: 'config' | 'set' | 'event',\n    idOrNameOrParams: string | ControlParams,\n    gtagParams?: ControlParams & EventParams & CustomParams\n  ): Promise<void> {\n    try {\n      // If event, check that relevant initialization promises have completed.\n      if (command === GtagCommand.EVENT) {\n        // If EVENT, second arg must be measurementId.\n        await gtagOnEvent(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          idOrNameOrParams as string,\n          gtagParams\n        );\n      } else if (command === GtagCommand.CONFIG) {\n        // If CONFIG, second arg must be measurementId.\n        await gtagOnConfig(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          measurementIdToAppId,\n          idOrNameOrParams as string,\n          gtagParams\n        );\n      } else {\n        // If SET, second arg must be params.\n        gtagCore(GtagCommand.SET, idOrNameOrParams as CustomParams);\n      }\n    } catch (e) {\n      logger.error(e);\n    }\n  }\n  return gtagWrapper;\n}\n\n/**\n * Creates global gtag function or wraps existing one if found.\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\n * 'event' calls that belong to the GAID associated with this Firebase instance.\n *\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param dataLayerName Name of global GA datalayer array.\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\n */\nexport function wrapOrCreateGtag(\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  dataLayerName: string,\n  gtagFunctionName: string\n): {\n  gtagCore: Gtag;\n  wrappedGtag: Gtag;\n} {\n  // Create a basic core gtag function\n  let gtagCore: Gtag = function (..._args: unknown[]) {\n    // Must push IArguments object, not an array.\n    (window[dataLayerName] as DataLayer).push(arguments);\n  };\n\n  // Replace it with existing one if found\n  if (\n    window[gtagFunctionName] &&\n    typeof window[gtagFunctionName] === 'function'\n  ) {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(\n    gtagCore,\n    initializationPromisesMap,\n    dynamicConfigPromisesList,\n    measurementIdToAppId\n  );\n\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName] as Gtag\n  };\n}\n\n/**\n * Returns first script tag in DOM matching our gtag url pattern.\n */\nexport function findGtagScriptOnPage(): HTMLScriptElement | null {\n  const scriptTags = window.document.getElementsByTagName('script');\n  for (const tag of Object.values(scriptTags)) {\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AnalyticsError {\n  ALREADY_EXISTS = 'already-exists',\n  ALREADY_INITIALIZED = 'already-initialized',\n  INTEROP_COMPONENT_REG_FAILED = 'interop-component-reg-failed',\n  INVALID_ANALYTICS_CONTEXT = 'invalid-analytics-context',\n  INDEXEDDB_UNAVAILABLE = 'indexeddb-unavailable',\n  FETCH_THROTTLE = 'fetch-throttle',\n  CONFIG_FETCH_FAILED = 'config-fetch-failed',\n  NO_API_KEY = 'no-api-key',\n  NO_APP_ID = 'no-app-id'\n}\n\nconst ERRORS: ErrorMap<AnalyticsError> = {\n  [AnalyticsError.ALREADY_EXISTS]:\n    'A Firebase Analytics instance with the appId {$id} ' +\n    ' already exists. ' +\n    'Only one Firebase Analytics instance can be created for each appId.',\n  [AnalyticsError.ALREADY_INITIALIZED]:\n    'Firebase Analytics has already been initialized.' +\n    'settings() must be called before initializing any Analytics instance' +\n    'or it will have no effect.',\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]:\n    'Firebase Analytics Interop Component failed to instantiate: {$reason}',\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]:\n    'Firebase Analytics is not supported in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]:\n    'IndexedDB unavailable or restricted in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [AnalyticsError.CONFIG_FETCH_FAILED]:\n    'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\n  [AnalyticsError.NO_API_KEY]:\n    'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid API key.',\n  [AnalyticsError.NO_APP_ID]:\n    'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid app ID.'\n};\n\ninterface ErrorParams {\n  [AnalyticsError.ALREADY_EXISTS]: { id: string };\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]: { reason: Error };\n  [AnalyticsError.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [AnalyticsError.CONFIG_FETCH_FAILED]: {\n    httpStatus: number;\n    responseMessage: string;\n  };\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]: { errorInfo: string };\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AnalyticsError, ErrorParams>(\n  'analytics',\n  'Analytics',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Most logic is copied from packages/remote-config/src/client/retrying_client.ts\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  DynamicConfig,\n  ThrottleMetadata,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { DYNAMIC_CONFIG_URL, FETCH_TIMEOUT_MILLIS } from './constants';\nimport { logger } from './logger';\n\n// App config fields needed by analytics.\nexport interface AppFields {\n  appId: string;\n  apiKey: string;\n  measurementId?: string;\n}\n\n/**\n * Backoff factor for 503 errors, which we want to be conservative about\n * to avoid overloading servers. Each retry interval will be\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\n * will be ~30 seconds (with fuzzing).\n */\nexport const LONG_RETRY_FACTOR = 30;\n\n/**\n * Base wait interval to multiplied by backoffFactor^backoffCount.\n */\nconst BASE_INTERVAL_MILLIS = 1000;\n\n/**\n * Stubbable retry data storage class.\n */\nclass RetryData {\n  constructor(\n    public throttleMetadata: { [appId: string]: ThrottleMetadata } = {},\n    public intervalMillis: number = BASE_INTERVAL_MILLIS\n  ) {}\n\n  getThrottleMetadata(appId: string): ThrottleMetadata {\n    return this.throttleMetadata[appId];\n  }\n\n  setThrottleMetadata(appId: string, metadata: ThrottleMetadata): void {\n    this.throttleMetadata[appId] = metadata;\n  }\n\n  deleteThrottleMetadata(appId: string): void {\n    delete this.throttleMetadata[appId];\n  }\n}\n\nconst defaultRetryData = new RetryData();\n\n/**\n * Set GET request headers.\n * @param apiKey App API key.\n */\nfunction getHeaders(apiKey: string): Headers {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\n/**\n * Fetches dynamic config from backend.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfig(\n  appFields: AppFields\n): Promise<DynamicConfig> {\n  const { appId, apiKey } = appFields;\n  const request: RequestInit = {\n    method: 'GET',\n    headers: getHeaders(apiKey)\n  };\n  const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n  const response = await fetch(appUrl, request);\n  if (response.status !== 200 && response.status !== 304) {\n    let errorMessage = '';\n    try {\n      // Try to get any error message text from server response.\n      const jsonResponse = (await response.json()) as {\n        error?: { message?: string };\n      };\n      if (jsonResponse.error?.message) {\n        errorMessage = jsonResponse.error.message;\n      }\n    } catch (_ignored) {}\n    throw ERROR_FACTORY.create(AnalyticsError.CONFIG_FETCH_FAILED, {\n      httpStatus: response.status,\n      responseMessage: errorMessage\n    });\n  }\n  return response.json();\n}\n\n/**\n * Fetches dynamic config from backend, retrying if failed.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfigWithRetry(\n  app: FirebaseApp,\n  // retryData and timeoutMillis are parameterized to allow passing a different value for testing.\n  retryData: RetryData = defaultRetryData,\n  timeoutMillis?: number\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, apiKey, measurementId } = app.options;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n\n  if (!apiKey) {\n    if (measurementId) {\n      return {\n        measurementId,\n        appId\n      };\n    }\n    throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n  }\n\n  const throttleMetadata: ThrottleMetadata = retryData.getThrottleMetadata(\n    appId\n  ) || {\n    backoffCount: 0,\n    throttleEndTimeMillis: Date.now()\n  };\n\n  const signal = new AnalyticsAbortSignal();\n\n  setTimeout(\n    async () => {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      signal.abort();\n    },\n    timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS\n  );\n\n  return attemptFetchDynamicConfigWithRetry(\n    { appId, apiKey, measurementId },\n    throttleMetadata,\n    signal,\n    retryData\n  );\n}\n\n/**\n * Runs one retry attempt.\n * @param appFields Necessary app config fields.\n * @param throttleMetadata Ongoing metadata to determine throttling times.\n * @param signal Abort signal.\n */\nasync function attemptFetchDynamicConfigWithRetry(\n  appFields: AppFields,\n  { throttleEndTimeMillis, backoffCount }: ThrottleMetadata,\n  signal: AnalyticsAbortSignal,\n  retryData: RetryData = defaultRetryData // for testing\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, measurementId } = appFields;\n  // Starts with a (potentially zero) timeout to support resumption from stored state.\n  // Ensures the throttle end time is honored if the last attempt timed out.\n  // Note the SDK will never make a request if the fetch timeout expires at this point.\n  try {\n    await setAbortableTimeout(signal, throttleEndTimeMillis);\n  } catch (e) {\n    if (measurementId) {\n      logger.warn(\n        `Timed out fetching this Firebase app's measurement ID from the server.` +\n          ` Falling back to the measurement ID ${measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`\n      );\n      return { appId, measurementId };\n    }\n    throw e;\n  }\n\n  try {\n    const response = await fetchDynamicConfig(appFields);\n\n    // Note the SDK only clears throttle state if response is success or non-retriable.\n    retryData.deleteThrottleMetadata(appId);\n\n    return response;\n  } catch (e) {\n    if (!isRetriableError(e)) {\n      retryData.deleteThrottleMetadata(appId);\n      if (measurementId) {\n        logger.warn(\n          `Failed to fetch this Firebase app's measurement ID from the server.` +\n            ` Falling back to the measurement ID ${measurementId}` +\n            ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`\n        );\n        return { appId, measurementId };\n      } else {\n        throw e;\n      }\n    }\n\n    const backoffMillis =\n      Number(e.httpStatus) === 503\n        ? calculateBackoffMillis(\n            backoffCount,\n            retryData.intervalMillis,\n            LONG_RETRY_FACTOR\n          )\n        : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n\n    // Increments backoff state.\n    const throttleMetadata = {\n      throttleEndTimeMillis: Date.now() + backoffMillis,\n      backoffCount: backoffCount + 1\n    };\n\n    // Persists state.\n    retryData.setThrottleMetadata(appId, throttleMetadata);\n    logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\n\n    return attemptFetchDynamicConfigWithRetry(\n      appFields,\n      throttleMetadata,\n      signal,\n      retryData\n    );\n  }\n}\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nfunction setAbortableTimeout(\n  signal: AnalyticsAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(AnalyticsError.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): boolean {\n  if (!(e instanceof FirebaseError)) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Shims a minimal AbortSignal (copied from Remote Config).\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class AnalyticsAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DynamicConfig,\n  Gtag,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport { GtagCommand, GA_FID_KEY, ORIGIN_KEY } from './constants';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { fetchDynamicConfigWithRetry } from './get-config';\nimport { logger } from './logger';\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\n\nasync function validateIndexedDB(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    logger.warn(\n      ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n        errorInfo: 'IndexedDB is not available in this environment.'\n      }).message\n    );\n    return false;\n  } else {\n    try {\n      await validateIndexedDBOpenable();\n    } catch (e) {\n      logger.warn(\n        ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n          errorInfo: e\n        }).message\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Initialize the analytics instance in gtag.js by calling config command with fid.\n *\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\n * part of the `page_view` event that's sent during the initialization\n * @param app Firebase app\n * @param gtagCore The gtag function that's not wrapped.\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\n * @param measurementIdToAppId Maps measurementID to appID.\n * @param installations FirebaseInstallations instance.\n *\n * @returns Measurement ID.\n */\nexport async function initializeIds(\n  app: FirebaseApp,\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [key: string]: string },\n  installations: FirebaseInstallations,\n  gtagCore: Gtag\n): Promise<string> {\n  const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n  // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n  dynamicConfigPromise\n    .then(config => {\n      measurementIdToAppId[config.measurementId] = config.appId;\n      if (\n        app.options.measurementId &&\n        config.measurementId !== app.options.measurementId\n      ) {\n        logger.warn(\n          `The measurement ID in the local Firebase config (${app.options.measurementId})` +\n            ` does not match the measurement ID fetched from the server (${config.measurementId}).` +\n            ` To ensure analytics events are always sent to the correct Analytics property,` +\n            ` update the` +\n            ` measurement ID field in the local config or remove it from the local config.`\n        );\n      }\n    })\n    .catch(e => logger.error(e));\n  // Add to list to track state of all dynamic config promises.\n  dynamicConfigPromisesList.push(dynamicConfigPromise);\n\n  const fidPromise: Promise<string | undefined> = validateIndexedDB().then(\n    envIsValid => {\n      if (envIsValid) {\n        return installations.getId();\n      } else {\n        return undefined;\n      }\n    }\n  );\n\n  const [dynamicConfig, fid] = await Promise.all([\n    dynamicConfigPromise,\n    fidPromise\n  ]);\n\n  // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  gtagCore('js' as any, new Date());\n\n  const configProperties: { [key: string]: string | boolean } = {\n    // guard against developers accidentally setting properties with prefix `firebase_`\n    [ORIGIN_KEY]: 'firebase',\n    update: true\n  };\n\n  if (fid != null) {\n    configProperties[GA_FID_KEY] = fid;\n  }\n\n  // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\n  return dynamicConfig.measurementId;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseAnalytics,\n  Gtag,\n  SettingsOptions,\n  DynamicConfig,\n  MinimalDynamicConfig\n} from '@firebase/analytics-types';\nimport {\n  logEvent,\n  setCurrentScreen,\n  setUserId,\n  setUserProperties,\n  setAnalyticsCollectionEnabled\n} from './functions';\nimport {\n  insertScriptTag,\n  getOrCreateDataLayer,\n  wrapOrCreateGtag,\n  findGtagScriptOnPage\n} from './helpers';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { areCookiesEnabled, isBrowserExtension } from '@firebase/util';\nimport { initializeIds } from './initialize-ids';\nimport { logger } from './logger';\nimport { FirebaseService } from '@firebase/app-types/private';\n\ninterface FirebaseAnalyticsInternal\n  extends FirebaseAnalytics,\n    FirebaseService {}\n\n/**\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\n * all or some of these, depending on the call's `send_to` param and the status\n * of the dynamic config fetches (see below).\n */\nlet initializationPromisesMap: {\n  [appId: string]: Promise<string>; // Promise contains measurement ID string.\n} = {};\n\n/**\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\n * wait on all these to be complete in order to determine if it can selectively\n * wait for only certain initialization (FID) promises or if it must wait for all.\n */\nlet dynamicConfigPromisesList: Array<Promise<\n  DynamicConfig | MinimalDynamicConfig\n>> = [];\n\n/**\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\n * fetch completes. If already populated, gtag config calls can use this to\n * selectively wait for only this app's initialization promise (FID) instead of all\n * initialization promises.\n */\nconst measurementIdToAppId: { [measurementId: string]: string } = {};\n\n/**\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\n */\nlet dataLayerName: string = 'dataLayer';\n\n/**\n * Name for window global gtag function used by GA: defaults to 'gtag'.\n */\nlet gtagName: string = 'gtag';\n\n/**\n * Reproduction of standard gtag function or reference to existing\n * gtag function on window object.\n */\nlet gtagCoreFunction: Gtag;\n\n/**\n * Wrapper around gtag function that ensures FID is sent with all\n * relevant event and config calls.\n */\nlet wrappedGtagFunction: Gtag;\n\n/**\n * Flag to ensure page initialization steps (creation or wrapping of\n * dataLayer and gtag script) are only run once per page load.\n */\nlet globalInitDone: boolean = false;\n\n/**\n * For testing\n */\nexport function resetGlobalVars(\n  newGlobalInitDone = false,\n  newInitializationPromisesMap = {},\n  newDynamicPromises = []\n): void {\n  globalInitDone = newGlobalInitDone;\n  initializationPromisesMap = newInitializationPromisesMap;\n  dynamicConfigPromisesList = newDynamicPromises;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n\n/**\n * For testing\n */\nexport function getGlobalVars(): {\n  initializationPromisesMap: { [appId: string]: Promise<string> };\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >;\n} {\n  return {\n    initializationPromisesMap,\n    dynamicConfigPromisesList\n  };\n}\n\n/**\n * This must be run before calling firebase.analytics() or it won't\n * have any effect.\n * @param options Custom gtag and dataLayer names.\n */\nexport function settings(options: SettingsOptions): void {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n  }\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n\n/**\n * Returns true if no environment mismatch is found.\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\n * error that also lists details for each mismatch found.\n */\nfunction warnOnBrowserContextMismatch(): void {\n  const mismatchedEnvMessages = [];\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    const details = mismatchedEnvMessages\n      .map((message, index) => `(${index + 1}) ${message}`)\n      .join(' ');\n    const err = ERROR_FACTORY.create(AnalyticsError.INVALID_ANALYTICS_CONTEXT, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n\nexport function factory(\n  app: FirebaseApp,\n  installations: FirebaseInstallations\n): FirebaseAnalytics {\n  warnOnBrowserContextMismatch();\n  const appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\n        `The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` +\n          ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config.`\n      );\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n    }\n  }\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_EXISTS, {\n      id: appId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n\n    // Detect if user has already put the gtag <script> tag on this page.\n    if (!findGtagScriptOnPage()) {\n      insertScriptTag(dataLayerName);\n    }\n    getOrCreateDataLayer(dataLayerName);\n\n    const { wrappedGtag, gtagCore } = wrapOrCreateGtag(\n      initializationPromisesMap,\n      dynamicConfigPromisesList,\n      measurementIdToAppId,\n      dataLayerName,\n      gtagName\n    );\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = initializeIds(\n    app,\n    dynamicConfigPromisesList,\n    measurementIdToAppId,\n    installations,\n    gtagCoreFunction\n  );\n\n  const analyticsInstance: FirebaseAnalyticsInternal = {\n    app,\n    // Public methods return void for API simplicity and to better match gtag,\n    // while internal implementations return promises.\n    logEvent: (eventName, eventParams, options) => {\n      logEvent(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        eventName,\n        eventParams,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setCurrentScreen: (screenName, options) => {\n      setCurrentScreen(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        screenName,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setUserId: (id, options) => {\n      setUserId(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        id,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setUserProperties: (properties, options) => {\n      setUserProperties(\n        wrappedGtagFunction,\n        initializationPromisesMap[appId],\n        properties,\n        options\n      ).catch(e => logger.error(e));\n    },\n    setAnalyticsCollectionEnabled: enabled => {\n      setAnalyticsCollectionEnabled(\n        initializationPromisesMap[appId],\n        enabled\n      ).catch(e => logger.error(e));\n    },\n    INTERNAL: {\n      delete: (): Promise<void> => {\n        delete initializationPromisesMap[appId];\n        return Promise.resolve();\n      }\n    }\n  };\n\n  return analyticsInstance;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { FirebaseAnalytics } from '@firebase/analytics-types';\nimport { FirebaseAnalyticsInternal } from '@firebase/analytics-interop-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport {\n  factory,\n  settings,\n  resetGlobalVars,\n  getGlobalVars\n} from './src/factory';\nimport { EventName } from './src/constants';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\nimport { ERROR_FACTORY, AnalyticsError } from './src/errors';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable,\n  areCookiesEnabled,\n  isBrowserExtension\n} from '@firebase/util';\nimport { name, version } from './package.json';\n\ndeclare global {\n  interface Window {\n    [key: string]: unknown;\n  }\n}\n\n/**\n * Type constant for Firebase Analytics.\n */\nconst ANALYTICS_TYPE = 'analytics';\n\nexport function registerAnalytics(instance: _FirebaseNamespace): void {\n  instance.INTERNAL.registerComponent(\n    new Component(\n      ANALYTICS_TYPE,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const installations = container\n          .getProvider('installations')\n          .getImmediate();\n\n        return factory(app, installations);\n      },\n      ComponentType.PUBLIC\n    ).setServiceProps({\n      settings,\n      EventName,\n      isSupported\n    })\n  );\n\n  instance.INTERNAL.registerComponent(\n    new Component('analytics-internal', internalFactory, ComponentType.PRIVATE)\n  );\n\n  instance.registerVersion(name, version);\n\n  function internalFactory(\n    container: ComponentContainer\n  ): FirebaseAnalyticsInternal {\n    try {\n      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: analytics.logEvent\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(AnalyticsError.INTEROP_COMPONENT_REG_FAILED, {\n        reason: e\n      });\n    }\n  }\n}\n\nexport { factory, settings, resetGlobalVars, getGlobalVars };\n\nregisterAnalytics(firebase as _FirebaseNamespace);\n\n/**\n * Define extension behavior of `registerAnalytics`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    analytics(app?: FirebaseApp): FirebaseAnalytics;\n  }\n  interface FirebaseApp {\n    analytics(): FirebaseAnalytics;\n  }\n}\n\n/**\n * this is a public static method provided to users that wraps four different checks:\n *\n * 1. check if it's not a browser extension environment.\n * 1. check if cookie is enabled in current browser.\n * 3. check if IndexedDB is supported by the browser environment.\n * 4. check if the current browser context is valid for using IndexedDB.\n *\n */\nasync function isSupported(): Promise<boolean> {\n  if (isBrowserExtension()) {\n    return false;\n  }\n  if (!areCookiesEnabled()) {\n    return false;\n  }\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}